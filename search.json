[{"title":"preg_replace函数在/e修饰符下的代码执行漏洞","url":"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a><strong>0x00 前言</strong></h1><p>最近在一个新生赛中遇到了这样一个考点，感觉蛮有意思的，记录一下解决过程<span id=\"more\"></span></p>\n<h1 id=\"0x01-漏洞成因\"><a href=\"#0x01-漏洞成因\" class=\"headerlink\" title=\"0x01 漏洞成因\"></a>0x01 漏洞成因</h1><p>先来看一下<code>preg_replace</code>函数的语法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mixed</span> <span class=\"title function_ invoke__\">preg_replace</span> ( <span class=\"keyword\">mixed</span> <span class=\"variable\">$pattern</span> , <span class=\"keyword\">mixed</span> <span class=\"variable\">$replacement</span> , <span class=\"keyword\">mixed</span> <span class=\"variable\">$subject</span> [, <span class=\"keyword\">int</span> <span class=\"variable\">$limit</span> = -<span class=\"number\">1</span> [, <span class=\"keyword\">int</span> &amp;<span class=\"variable\">$count</span> ]] )</span><br></pre></td></tr></table></figure>\n\n<p>平时我们经常用它来做一些字符的替换</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">&#x27;aaBbcc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/bb/i&#x27;</span>, <span class=\"string\">&#x27;dd&#x27;</span>, <span class=\"variable\">$str</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$str</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.png\" alt=\"img\"></p>\n<p><code>pattern</code>参数支持正则表达式，而在PHP中正则表达式的<code>/e</code>修饰符会使<code>preg_replace</code>在成功匹配的情况下将中间的<code>replacement</code>参数当作PHP代码执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/ydj/e&#x27;</span>,<span class=\"string\">&#x27;phpinfo()&#x27;</span>, <span class=\"string\">&#x27;ydj666&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.png\" alt=\"img\"></p>\n<p>值得一提的是，PHP7已经修复了这个问题</p>\n<h1 id=\"0x02-漏洞利用\"><a href=\"#0x02-漏洞利用\" class=\"headerlink\" title=\"0x02 漏洞利用\"></a>0x02 漏洞利用</h1><p>先来看看题目给出的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>]) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pattern&#x27;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$pattern</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pattern&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag|system|pass|cat|chr|ls|[0-9]|tac|nl|od|ini_set|eval|exec|dir|\\.|\\`|read*|show|file|\\&lt;|popen|pcntl|var_dump|print|var_export|echo|implode|print_r|getcwd|head|more|less|tail|vi|sort|uniq|sh|include|require|scandir|\\/| |\\?|mv|cp|next|show_source|highlight_file|glob|\\~|\\^|\\||\\&amp;|\\*|\\%/i&quot;</span>,<span class=\"variable\">$code</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$code</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>];</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/(&#x27;</span> . <span class=\"variable\">$pattern</span> . <span class=\"string\">&#x27;)/ei&#x27;</span>,<span class=\"string\">&#x27;print_r(&quot;\\\\1&quot;)&#x27;</span>, <span class=\"variable\">$code</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;you are smart&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;try again&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;it is begin&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>preg_replace</code>函数使用了<code>/e</code>修饰符，符合代码执行的条件，但是第二个参数却是一段固定的代码，咋一看好像无法利用。但是我们发现了该参数中的<code>\\\\1</code>看起来有点奇怪，当我们尝试着去匹配一些字符串的时候该参数代码执行的结果却是打印出我们匹配到的字符</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/3.png\" alt=\"img\"></p>\n<p>带着疑问去百度了一下，终于在<a href=\"https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html\">w3cschool</a>中找到了答案</p>\n<blockquote>\n<p>反向引用：</p>\n<p>对一个正则表达式模式或部分模式两边添加<strong>圆括号</strong>将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>\n<p>所以 \\1 指定第一个子匹配项</p>\n</blockquote>\n<p>观察题目，我们可以发现正则表达式的部分确实加上了圆括号</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.png\" alt=\"img\"></p>\n<p>这就意味着第二个参数也存在着我们可控的地方，但是<code>\\1</code>是被当成字符串来操作的，有没有办法可以让字符串的内容也可以代码执行呢？继续查找资料，发现了PHP中有一个叫<a href=\"https://www.php.net/manual/zh/language.variables.variable.php\">可变变量</a>的东西<code>$&#123;&#125;</code>，类似于Linux中<code>$()</code>的用法，</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/5.png\" alt=\"img\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;$&#123;phpinfo()&#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/6.png\" alt=\"img\"></p>\n<p>也就是说，<code>$&#123;phpinfo()&#125;</code>中的<code>phpinfo()</code>会被当做变量先执行而且只能适用于双引号字符串，单引号不行</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/7.png\" alt=\"img\"></p>\n<p>还好题目恰好是双引号字符串，符合条件，所以现在代码执行的问题也解决了，剩下的就是想办法让参数一的正则表达式能够成功匹配到我们想要匹配的字符<code>&quot;$&#123;phpinfo()&#125;&quot;</code>，这里我们选择常见的<code>.*</code>（匹配任何字符（包括换行符）零个或多个），最后去题目传参</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/8.png\" alt=\"img\"></p>\n<p>成功执行phpinfo找到flag</p>\n<h1 id=\"0x03-漏洞防御\"><a href=\"#0x03-漏洞防御\" class=\"headerlink\" title=\"0x03 漏洞防御\"></a>0x03 漏洞防御</h1><ul>\n<li>使用安全的函数<code>preg_replace_callback</code>，在报错中也可以看到官方给出的告警</li>\n</ul>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/9.png\" alt=\"img\"></p>\n<ul>\n<li>选择单引号闭合</li>\n</ul>\n<p>双引号</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/10.png\" alt=\"img\"></p>\n<p>单引号</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/11.png\" alt=\"img\"></p>\n<ul>\n<li>正则表达式不加括号（不捕获）</li>\n</ul>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/12.png\" alt=\"img\"></p>\n<h1 id=\"0x04-总结\"><a href=\"#0x04-总结\" class=\"headerlink\" title=\"0x04 总结\"></a>0x04 总结</h1><p>该漏洞点比较简单，但是还是很值得分析一下的，其实我们可以发现许多漏洞的产生往往发生在一些比较方便的功能上，怪不得圈内总是流传着这么一句话：PHP是世界上最好的语言</p>\n"},{"title":"我与网安","url":"/2023/11/05/%E6%88%91%E4%B8%8E%E7%BD%91%E5%AE%89/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<p>​\t本人是网络空间安全专业的学生，在网络安全的学习道路上已经摸爬滚打了两年，这里以高考后的暑假开始计算的，到这个暑假，刚好两年。两年学习下来，我没有成为CTF大神，也并不是网络攻防专家。啥都学了一点点，却没有一样是精通的，相比于大家眼中可能是“很牛”的网络安全科班生，我更像一个脚本小子，只会“一把梭”。我想，可能这才是很多普通网安人的样子吧。<span id=\"more\"></span></p>\n<p>​\t我并不是高考后才了解了网络安全这一专业。和许多师傅们一样，我从小到大就受到影视剧中“黑客”这一形象的感染，我觉得“横行”网络世界的黑客们优雅而又神秘，给我一种“万花丛中过，片叶不沾身”的侠客情怀，这也在我心中埋下了向往的种子，emm…..，仅仅是向往而已，因为每当我打开电脑的时候，更吸引我的还是各种各样的游戏，尤其是初高中，我更是一度沉迷手机游戏而无法自拔。所以到现在为止对于那些从小就开始敲代码研究计算机的师傅我都是既羡慕又崇拜，或许这就是我和高手的差距之一吧。</p>\n<p>​\t在我高二日常不想学习的时候，我就会憧憬未来，于是乎就开始翻找一些大学专业，看看有没有什么有趣的，而在添加了关键字“薪资排行”之后，我发现了“信息安全”这一专业，当我进一步了解它时，我不禁惊呼：哇去，这特喵好像黑客啊！而在搜索的过程，我又发现了“网络空间安全专业”，我直接大喊：哇去，这特喵就是黑客啊！而且，好像平均薪资也好高啊！于是乎，“非信息安全和网络空间安全不选”成为了我心中的一个执念，所以在打王者之余，我还经常去百度，b站或者抖音等地方疯狂搜索：如何成为一名黑客、黑客学习路线、黑客需要掌握什么技能等等，emm……，就是这么搞笑哈哈哈，混迹网安多年的师傅们都知道，这么搜出来的东西大多数都是黑客面具加绿色代码雨之类的东西。不能说毫无作用，简直是屁用没有。</p>\n<p>​\t这样的状态持续到了高考后，不出意外的话，要出意外了。没错，我考砸了，合情合理，又不是什么天才少年，整天不学习就想着打游戏能考出个花来，广东省的490，只能读个普通2a。我本想着报个普通2a的计算机也行，可以自学网络安全的。而现实却给我当头一棒，给调剂到XX学院的土木工程去了，不是我专业歧视，而是我要是去读了，那这辈子别说网络安全了，连计算机可能都碰不太上了。于是，我复读了。但是，复读并没有使我开始认真学习，我依旧打游戏，摆烂。也是这一段经历使我明白了我这种人对于不喜欢的事物是不可能坚持的下去的，所以信息安全和网络空间安全是非上不可了，不然这辈子可能就这样了。然而，我还是没有好好学习……。不过值得一提的是，我虽然没有自己的电脑，但是我复读的这一年了解到了Termux（一个可以在安卓上运行Linux甚至安装kali的app），虽然捣鼓了一段时间也没学到什么，但是运行命令或者跑脚本这些”黑客操作“极大的满足了我对网安的好奇心。ok，第二次高考结束，比去年多了个四五十分，勉强过了一本线，却报不上一些我认识的有网安信安的省内高校，强行填报极有可能给调剂到其他专业，这是我不能接受的。正当我进退两难之际，之前的老同学告诉我她的学校也有网安专业，只不过刚办了一年而已，我一听直接来了兴致，看了一下虽然也是个普通2a，但是我的分数起码能稳稳拿下网安，于是我直接第一学校第一专业给它填上了志愿。也不出意料的给录取了，那一刻，又一个网安人的命运齿轮开始了转动……</p>\n<p>​\t在确认自己给学校的网安成功收留了之后，买了台轻薄本，就开始疯狂的找各种网安教程（此时已不在是只会搜”如何成为一名黑客了“），当时也是在b站看到了迪总的课，但是捏，当时年轻气盛，只想速成，这么长的视频要学到啥时候，于是直接跳过了我迪总的课，现在依旧悔不当初。在看了”海量“的速成课之后，ok，除了很多东西混个眼熟之外，还是啥也不会，外加上学院组织我们提前学一下C语言，暑假的后半段又跑去学C语言去了（中间还装了一下kali、burp什么的，装一个花好几天哈哈哈）。看起来我是磕磕绊绊，寥寥草草的步入了网安的大门，而现在回想起来，这些经历都对我的网安学习有着很大的推进作用。</p>\n<p>​\t大一开学，在发现自己的计算机专业课只有一个C语言时，我决定开始自学。由于我们学院是刚刚成立一年，我们上面只有大二的师兄师姐，而且老师有很多都是从计科院调过来的，网络安全的专业性客观来说不是很强，所以我们这两届学生注定是要自己摸爬滚打的。再经历了暑假的”速成“打击后，我开始意识到系统学习的重要性，于是我最终锁定了最受好评的迪总的b站免费课，开始了进一步的学习，边学边跟着操作，理解不了的就跑去看其他的视频或文章，渐渐的在脑海里也对网络安全（严格来说是Web安全）有了初步框架，这份热情也持续了挺久的（对我来说），直到学完了Web漏洞这一块，我彻底失去了耐心，这么长的课对我这种坐不太住的人就是一个折磨，也是从这个时候开始，我遇到问题更倾向于查看文章类型的资料或者是针对性的视频，很少再去看很长的系统学习视频了，我自己认为这应该是一个错误的做法。</p>\n<p>​\t熟悉了漏洞原理之后，我开始踏入了CTF的道路，主攻Web方向。每次拿到flag并且提交成功的快感并不亚于游戏直线上分。于是我便开始了近乎疯狂的刷题，这也成为了除游戏之外第二个能让我废寝忘食的事情，从基础入门到绕各种waf，我乐此不疲。在实力提升的同时，也尝试着去参加各种各样的比赛，不得不说，CTF的比赛真的挺多的。然后也是在大一下参加了全国大学生信息安全竞赛拿了个分区二等奖，”蓝帽杯“拿了个国三，还有一些杂七杂八的。我在网上看到很多人都说CTF没啥用，实战用不上。而在这里我可以十分肯定的告诉大家，打CTF的这段时间是我进步最快的时候，因为打CTF其实是一个进一步理解漏洞原理并加以利用的过程，而我在学渗透测试和红蓝对抗跟多的是学习工具的使用和理清思路（当然这也是我比较菜的原因），所以CTF锻炼了我信息收集和解决问题的能力，也让我跟好的理解了漏洞原理，对我未来实战的发展带来不少益处。</p>\n<p>​\t在大二上学期的一段时间中，我发现我的CTF学习似乎到达了一个瓶颈，简单的题都能做，而稍微难一点就感觉十分困难。我慢慢的开始感觉到可能是我代码基础的问题，这也是最让我头疼的地方，因为我是一个对编程无感的人（不知道有没有师傅和我一样），看着一大段代码我就头疼，而CTF的进阶，代码审计是必不可少的。于是我开始逼着自己看代码，遇到不会的函数就去搜，很简单的一段代码我却要分析很久（这里提一嘴，有一门语言的基础真的真的很重要，它可以让你在学其他语言的时候快速理清逻辑，只需要关注一些函数方法的使用就行了，个人认为）。而这种强制性的学习对我来说作用不大，反倒是一步步消磨了我对CTF的兴趣，我开始研究起了SRC。</p>\n<p>​\t挖洞同样是一件对我有着很大的吸引力的事情，毕竟目标都是真实的网站。在跟着网上看来的方法断断续续的尝试了的很长一段时间后，终于在漏洞盒子，补天，edu，360众包等平台都有了提交通过的漏洞，都是一些很基础的公益漏洞，弱口令、sql注入和源码泄露等等，而且这东西确实是要花时间才能体会到的（对于普通的我来说），所以挖不到洞师傅也不用着急，我们没有大佬们的天赋，那就靠坚持来收获果实。然后思路打开之后，也是挖到了浙大的漏洞报告证书和很少数目的漏洞赏金（绝大多数都是公益的），虽然成果不多，但对我而言却是一个极大的鼓舞，然后就开始了边打CTF和边挖洞的平淡生活，也偶尔搭靶场学一下渗透测试。</p>\n<p>​\t大二下学期，出于准备参加国HVV的目的，也开始研究起了网络攻防。为了应付面试去学一些蓝队的知识，而在这个过程中，我开始发现原来红队才是我理想的工作（只能说太黑客了，太库辣），于是乎，在准备面试的同时又开始研究起了一些红队的技术，主要是信息收集和Web打点。后面国护也定岗了蓝队中级减，也在院长的支持下打了一次市级HW的红队并且拿了一个第五名三等奖，还有奖金拿，挺不错的。</p>\n<p>​\t回顾这两年的学习之路，没有CTF佬的AK全场，没有SRC佬的一洞百分，更没有红队佬的0day爆杀，看起来只有这里学一点，那里学一会，最终还是只能靠工具一把梭。而我也对此也并没有什么遗憾，因为在这个学习的过程中，我和朋友一起创立了一个网安俱乐部，虽然大家都不是很强的大佬，但是大家志同道合，一起打CTF，一起打攻防，一起学习讨论，分享知识，我也在这段学习的过程中收获了一些不错的成果，也完成了自己当初定的一些小目标：加战队，打线下比赛，拿国奖，挖一个学校的漏洞，用网安知识赚点钱（合法），打攻防等等。真的十分快乐，而且我学网安的初衷也是因为兴趣爱好，所以管它以后能不能成为大佬，能不能年薪百万。只希望能够在未来的网安之路中认识更多有趣的人，做更多有趣的事，活在当下，享受眼前，要是能再顺便赚点米那就再好不过了。</p>\n"}]